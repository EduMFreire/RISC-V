<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>somador4</string>
        </entry>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>A:4,B:4,Cin</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>-- Ideia
-- Ter 8 somadores de 4 bits com carry lookahead. Assim, o carry se propaga de 4 em 4 em vez de se propagar de 1 em 1
-- Ter um módulo carry-enable, que recebe mode_i, vec_size_i, o índice do somador (0 a 7) e Cin e determina qual carry realmente vai para o somador (pode ter que frear propagação devido à separação em blocos, ou então forçar o carry em 1 para subtração)

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity somador4 is
    Port(
        A: in std_logic_vector(3 downto 0);
        B: in std_logic_vector(3 downto 0);
        Cin: in std_logic;

        S: out std_logic_vector(3 downto 0);
        Cout: out std_logic
    );
end somador4;

architecture Behavioral of somador4 is

    signal prop: std_logic_vector(3 downto 0);
    signal gen: std_logic_vector(3 downto 0);
    signal carry: std_logic_vector(3 downto 0);

begin

    signals_generate: for i in 0 to 3 generate
        prop(i) &lt;= A(i) xor B(i);
        gen(i) &lt;= A(i) and B(i);
    end generate;

    -- Carry lookahead
    carry(0) &lt;= Cin;
    carry(1) &lt;= gen(0) or (prop(0) and Cin);

    carry(2) &lt;= gen(1) or (prop(1) and gen(0)) or (prop(1) and prop(0) and Cin);

    carry(3) &lt;= gen(2) or (prop(2) and gen(1)) or (prop(2) and prop(1) and gen(0)) or (prop(2) and prop(1) and prop(0) and Cin);

    Cout &lt;= gen(3) or (prop(3) and gen(2)) or (prop(3) and prop(2) and gen(1)) or (prop(3) and prop(2) and prop(1) and gen(0)) or (prop(3) and prop(2) and prop(1) and prop(0) and Cin);

    sum_generate: for i in 0 to 3 generate
        S(i) &lt;= prop(i) xor carry(i);
    end generate;

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>S:4,Cout</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>6</int>
        </entry>
      </elementAttributes>
      <pos x="680" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="660" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="620" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes/>
      <pos x="580" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="820" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes/>
      <pos x="860" y="340"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="660" y="320"/>
      <p2 x="680" y="320"/>
    </wire>
    <wire>
      <p1 x="800" y="320"/>
      <p2 x="820" y="320"/>
    </wire>
    <wire>
      <p1 x="620" y="340"/>
      <p2 x="680" y="340"/>
    </wire>
    <wire>
      <p1 x="800" y="340"/>
      <p2 x="860" y="340"/>
    </wire>
    <wire>
      <p1 x="580" y="360"/>
      <p2 x="680" y="360"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>