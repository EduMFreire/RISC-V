<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>vector_shifter</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>A_i:32,B_i:32,mode_i,vecSize_i:2</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity vector_shifter is
    Port(
        A_i       : in  std_logic_vector(31 downto 0);
        B_i       : in  std_logic_vector(31 downto 0);  -- rs2 ou imediato
        mode_i    : in  std_logic;                      -- &apos;0&apos; = shift left, &apos;1&apos; = shift right
        vecSize_i : in  std_logic_vector(1 downto 0);   -- 00:4b, 01:8b, 10:16b, 11:32b
        S_o       : out std_logic_vector(31 downto 0);
	zero_out  : out std_logic
    );
end vector_shifter;

architecture Behavioral of vector_shifter is

    signal result : std_logic_vector(31 downto 0);
    signal shamt  : std_logic_vector(4 downto 0);
    signal shamt_int : integer;
    constant ALL_ZEROS_32 : std_logic_vector(31 downto 0) := (others =&gt; &apos;0&apos;);

begin

    -- Pega os 5 LSBs do B_i como shift amount
    shamt &lt;= B_i(4 downto 0);
    shamt_int &lt;= to_integer(unsigned(shamt));

    -- Processo único com geradores internos para diferentes tamanhos de vetores
    process(A_i, shamt_int, mode_i, vecSize_i)
        variable temp_result : std_logic_vector(31 downto 0);
	variable segment4 : std_logic_vector(3 downto 0);
    	variable segment8 : std_logic_vector(7 downto 0);
    	variable segment16 : std_logic_vector(15 downto 0);
    begin
        temp_result := (others =&gt; &apos;0&apos;);

        case vecSize_i is

            when &quot;00&quot; =&gt;  -- 4-bit vetores (8 grupos)
                gen4: for i in 0 to 7 loop
		if shamt_int &gt;= 4 then
            		segment4 := (others =&gt; &apos;0&apos;);
		else
                    if mode_i = &apos;0&apos; then
                        segment4 := std_logic_vector(shift_left(unsigned(A_i(4*i+3 downto 4*i)), shamt_int mod 4));
                    else
                        segment4 := std_logic_vector(shift_right(unsigned(A_i(4*i+3 downto 4*i)), shamt_int mod 4));
                    end if;
		end if;
                    temp_result(4*i+3 downto 4*i) := segment4;
                end loop;

            when &quot;01&quot; =&gt;  -- 8-bit vetores (4 grupos)
                gen8: for i in 0 to 3 loop
                    if mode_i = &apos;0&apos; then
                        segment8 := std_logic_vector(shift_left(unsigned(A_i(8*i+7 downto 8*i)), shamt_int mod 8));
                    else
                        segment8 := std_logic_vector(shift_right(unsigned(A_i(8*i+7 downto 8*i)), shamt_int mod 8));
                    end if;
                    temp_result(8*i+7 downto 8*i) := segment8;
                end loop;

            when &quot;10&quot; =&gt;  -- 16-bit vetores (2 grupos)
                gen16: for i in 0 to 1 loop
                    if mode_i = &apos;0&apos; then
                        segment16 := std_logic_vector(shift_left(unsigned(A_i(16*i+15 downto 16*i)), shamt_int mod 16));
                    else
                        segment16 := std_logic_vector(shift_right(unsigned(A_i(16*i+15 downto 16*i)), shamt_int mod 16));
                    end if;
                    temp_result(16*i+15 downto 16*i) := segment16;
                end loop;

            when others =&gt;  -- 32-bit vetor (1 grupo)
                if mode_i = &apos;0&apos; then
                    temp_result := std_logic_vector(shift_left(unsigned(A_i), shamt_int mod 32));
                else
                    temp_result := std_logic_vector(shift_right(unsigned(A_i), shamt_int mod 32));
                end if;

        end case;

        S_o &lt;= temp_result;
	if temp_result = ALL_ZEROS_32 then
            zero_out &lt;= &apos;1&apos;;
        else
            zero_out &lt;= &apos;0&apos;;
        end if;

    end process;

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>S_o:32,zero_out</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>10</int>
        </entry>
      </elementAttributes>
      <pos x="780" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>A</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="580" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>B</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="580" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>Direção</string>
        </entry>
      </elementAttributes>
      <pos x="580" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>Size</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="580" y="520"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>S</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="1140" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>zero_out</string>
        </entry>
      </elementAttributes>
      <pos x="1140" y="460"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="980" y="400"/>
      <p2 x="1060" y="400"/>
    </wire>
    <wire>
      <p1 x="980" y="420"/>
      <p2 x="1100" y="420"/>
    </wire>
    <wire>
      <p1 x="720" y="420"/>
      <p2 x="780" y="420"/>
    </wire>
    <wire>
      <p1 x="1060" y="360"/>
      <p2 x="1140" y="360"/>
    </wire>
    <wire>
      <p1 x="580" y="360"/>
      <p2 x="720" y="360"/>
    </wire>
    <wire>
      <p1 x="580" y="280"/>
      <p2 x="780" y="280"/>
    </wire>
    <wire>
      <p1 x="580" y="440"/>
      <p2 x="780" y="440"/>
    </wire>
    <wire>
      <p1 x="580" y="520"/>
      <p2 x="780" y="520"/>
    </wire>
    <wire>
      <p1 x="1100" y="460"/>
      <p2 x="1140" y="460"/>
    </wire>
    <wire>
      <p1 x="720" y="360"/>
      <p2 x="720" y="420"/>
    </wire>
    <wire>
      <p1 x="1060" y="360"/>
      <p2 x="1060" y="400"/>
    </wire>
    <wire>
      <p1 x="1140" y="360"/>
      <p2 x="1140" y="380"/>
    </wire>
    <wire>
      <p1 x="1100" y="420"/>
      <p2 x="1100" y="460"/>
    </wire>
    <wire>
      <p1 x="780" y="280"/>
      <p2 x="780" y="400"/>
    </wire>
    <wire>
      <p1 x="780" y="460"/>
      <p2 x="780" y="520"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>
