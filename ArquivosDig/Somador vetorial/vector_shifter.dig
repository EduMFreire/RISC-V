<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>vector_shifter</string>
        </entry>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>A_i:32,B_i:32,mode_i,vecSize_i:2</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity vector_shifter is
    Port(
        A_i       : in  std_logic_vector(31 downto 0);
        B_i       : in  std_logic_vector(31 downto 0);  -- rs2 ou imediato
        mode_i    : in  std_logic; -- &apos;0&apos; = shift left, &apos;1&apos; = shift right
        vecSize_i : in  std_logic_vector(1 downto 0); -- 00:4b, 01:8b, 10:16b, 11:32b

        S_o       : out std_logic_vector(31 downto 0)
    );
end vector_shifter;

architecture Behavioral of vector_shifter is

    constant NUM_BLOCKS : integer := 8;

    type vec4_array is array (0 to NUM_BLOCKS-1) of std_logic_vector(3 downto 0);
    signal A_blocks, S_blocks : vec4_array;
    signal result : std_logic_vector(31 downto 0);

    -- Extrai os 5 bits de shift amount (seguindo RISC-V)
    signal shamt : std_logic_vector(4 downto 0);

begin

    -- Pegando apenas os 5 LSBs de B_i
    shamt &lt;= B_i(4 downto 0);

    -- Dividir A_i em blocos de 4 bits
    splitter: for i in 0 to NUM_BLOCKS-1 generate
        A_blocks(i) &lt;= A_i(4*i+3 downto 4*i);
    end generate;

    -- Aplica shift vetorial por bloco, considerando o tamanho do vetor
    shifter: for i in 0 to NUM_BLOCKS-1 generate
        process(A_blocks, shamt, mode_i, vecSize_i)
            variable local_shift : integer;
            variable A_val       : std_logic_vector(3 downto 0);
            variable result_val  : std_logic_vector(3 downto 0);
        begin
            A_val := A_blocks(i);
            result_val := (others =&gt; &apos;0&apos;);

            -- Determina o quanto deslocar com base no tamanho do vetor
            if vecSize_i = &quot;00&quot; then       -- 4-bit vetores (1 bloco)
                local_shift := to_integer(unsigned(shamt)) mod 4;
            elsif vecSize_i = &quot;01&quot; then    -- 8-bit vetores (2 blocos)
                local_shift := to_integer(unsigned(shamt)) mod 8;
            elsif vecSize_i = &quot;10&quot; then    -- 16-bit vetores (4 blocos)
                local_shift := to_integer(unsigned(shamt)) mod 16;
            else                           -- 32-bit vetor (8 blocos)
                local_shift := to_integer(unsigned(shamt)) mod 32;
            end if;

            -- SHIFT lógico
            if mode_i = &apos;0&apos; then
                -- Shift Left
                result_val := std_logic_vector(shift_left(unsigned(A_val), local_shift mod 4));
            else
                -- Shift Right
                result_val := std_logic_vector(shift_right(unsigned(A_val), local_shift mod 4));
            end if;

            S_blocks(i) &lt;= result_val;
        end process;
    end generate;

    -- Reconstroi resultado final
    joiner: for i in 0 to NUM_BLOCKS-1 generate
        result(4*i+3 downto 4*i) &lt;= S_blocks(i);
    end generate;

    S_o &lt;= result;

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>S_o:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>10</int>
        </entry>
      </elementAttributes>
      <pos x="800" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>A</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="580" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>B</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="580" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>Direção</string>
        </entry>
      </elementAttributes>
      <pos x="580" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>Size</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="580" y="520"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>S</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="1140" y="380"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="740" y="400"/>
      <p2 x="800" y="400"/>
    </wire>
    <wire>
      <p1 x="780" y="420"/>
      <p2 x="800" y="420"/>
    </wire>
    <wire>
      <p1 x="580" y="280"/>
      <p2 x="800" y="280"/>
    </wire>
    <wire>
      <p1 x="580" y="360"/>
      <p2 x="800" y="360"/>
    </wire>
    <wire>
      <p1 x="580" y="440"/>
      <p2 x="740" y="440"/>
    </wire>
    <wire>
      <p1 x="580" y="520"/>
      <p2 x="780" y="520"/>
    </wire>
    <wire>
      <p1 x="1000" y="380"/>
      <p2 x="1140" y="380"/>
    </wire>
    <wire>
      <p1 x="800" y="280"/>
      <p2 x="800" y="340"/>
    </wire>
    <wire>
      <p1 x="740" y="400"/>
      <p2 x="740" y="440"/>
    </wire>
    <wire>
      <p1 x="780" y="420"/>
      <p2 x="780" y="520"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>
