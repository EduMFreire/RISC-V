<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>VectorAdderSubtractor</string>
        </entry>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>A_i:32,B_i:32,mode_i,vecSize_i:2</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity VectorAdderSubtractor is
    Port (
        A_i       : in  std_logic_vector(31 downto 0);
        B_i       : in  std_logic_vector(31 downto 0);
        mode_i    : in  std_logic; -- &apos;0&apos; para soma, &apos;1&apos; para subtração
        vecSize_i : in  std_logic_vector(1 downto 0); -- Tamanho do vetor
        S_o       : out std_logic_vector(31 downto 0)
    );
end VectorAdderSubtractor;

architecture Behavioral of VectorAdderSubtractor is
    signal B_operand : std_logic_vector(31 downto 0);
    signal carry_in  : std_logic;
    signal result    : std_logic_vector(32 downto 0); -- 33 bits para incluir carry out
begin
    -- Seleção do operando B (inverte bits para subtração)
    B_operand &lt;= not B_i when mode_i = &apos;1&apos; else B_i;
    carry_in  &lt;= &apos;1&apos; when mode_i = &apos;1&apos; else &apos;0&apos;;
    
    -- Implementação do somador com Carry-Lookahead
    result &lt;= std_logic_vector(unsigned(&apos;0&apos; &amp; A_i) + unsigned(&apos;0&apos; &amp; B_operand) + (&quot;&quot; &amp; carry_in));
    
    -- Processo para mascarar os bits não utilizados com base no tamanho do vetor
    process(A_i, B_i, mode_i, vecSize_i, result)
    begin
        case vecSize_i is
            when &quot;00&quot; =&gt; -- 4 bits
                S_o(3 downto 0) &lt;= result(3 downto 0);
                S_o(31 downto 4) &lt;= (others =&gt; &apos;0&apos;);
            when &quot;01&quot; =&gt; -- 8 bits
                S_o(7 downto 0) &lt;= result(7 downto 0);
                S_o(31 downto 8) &lt;= (others =&gt; &apos;0&apos;);
            when &quot;10&quot; =&gt; -- 16 bits
                S_o(15 downto 0) &lt;= result(15 downto 0);
                S_o(31 downto 16) &lt;= (others =&gt; &apos;0&apos;);
            when &quot;11&quot; =&gt; -- 32 bits
                S_o &lt;= result(31 downto 0);
            when others =&gt;
                S_o &lt;= (others =&gt; &apos;0&apos;);
        end case;
    end process;
end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>S_o:32</string>
        </entry>
      </elementAttributes>
      <pos x="840" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>A</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
        <entry>
          <string>InDefault</string>
          <value v="50" z="false"/>
        </entry>
      </elementAttributes>
      <pos x="720" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>B</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
        <entry>
          <string>InDefault</string>
          <value v="33" z="false"/>
        </entry>
      </elementAttributes>
      <pos x="720" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>Mode</string>
        </entry>
      </elementAttributes>
      <pos x="720" y="480"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>Size</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
        <entry>
          <string>InDefault</string>
          <value v="2" z="false"/>
        </entry>
      </elementAttributes>
      <pos x="720" y="560"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>result</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="1020" y="380"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="720" y="320"/>
      <p2 x="740" y="320"/>
    </wire>
    <wire>
      <p1 x="720" y="400"/>
      <p2 x="740" y="400"/>
    </wire>
    <wire>
      <p1 x="780" y="400"/>
      <p2 x="840" y="400"/>
    </wire>
    <wire>
      <p1 x="720" y="480"/>
      <p2 x="780" y="480"/>
    </wire>
    <wire>
      <p1 x="720" y="560"/>
      <p2 x="820" y="560"/>
    </wire>
    <wire>
      <p1 x="740" y="340"/>
      <p2 x="840" y="340"/>
    </wire>
    <wire>
      <p1 x="820" y="420"/>
      <p2 x="840" y="420"/>
    </wire>
    <wire>
      <p1 x="740" y="360"/>
      <p2 x="840" y="360"/>
    </wire>
    <wire>
      <p1 x="900" y="380"/>
      <p2 x="1020" y="380"/>
    </wire>
    <wire>
      <p1 x="740" y="320"/>
      <p2 x="740" y="340"/>
    </wire>
    <wire>
      <p1 x="740" y="360"/>
      <p2 x="740" y="400"/>
    </wire>
    <wire>
      <p1 x="820" y="420"/>
      <p2 x="820" y="560"/>
    </wire>
    <wire>
      <p1 x="780" y="400"/>
      <p2 x="780" y="480"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>
