<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>alu</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,reset,a_in:32,b_in:32,c_in:5</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity alu is
    Port (
	clk           : in  std_logic;
        reset         : in  std_logic;
        a_in           : in  std_logic_vector(31 downto 0);
        b_in           : in std_logic_vector(31 downto 0);
	c_in		: in std_logic_vector(4 downto 0);
	result_out	: out std_logic_vector(31 downto 0);
	zero_flag_out	: out std_logic
    );
end alu;

architecture Behavioral of alu is

signal B_operand : std_logic_vector(31 downto 0);
signal carry_in  : std_logic;
signal result    : std_logic_vector(32 downto 0); -- 33 bits para incluir carry out

begin
-- Seleção do operando B (inverte bits para subtração)
    B_operand &lt;= not b_in when c_in(2) = &apos;1&apos; else b_in;
    carry_in  &lt;= &apos;1&apos; when c_in(2) = &apos;1&apos; else &apos;0&apos;;
    
    -- Implementação do somador com Carry-Lookahead
    result &lt;= std_logic_vector(unsigned(&apos;0&apos; &amp; a_in) + unsigned(&apos;0&apos; &amp; B_operand) + (&quot;&quot; &amp; carry_in));

  process(clk, reset)
	variable temp : std_logic_vector(31 downto 0);
	variable temp2 : std_logic_vector(31 downto 0);
  begin
    if reset = &apos;1&apos; then
        result_out &lt;= (others =&gt; &apos;0&apos;);
	zero_flag_out &lt;= &apos;0&apos;;
    elsif rising_edge(clk) then
	temp  := (others =&gt; &apos;0&apos;);
	temp2 := std_logic_vector(to_unsigned(0,32));
	case c_in is
		when &quot;00000&quot; =&gt;
			temp := a_in and b_in;
		when &quot;00001&quot; =&gt;
			temp := a_in or b_in;
		when &quot;00011&quot; =&gt;
			temp := a_in xor b_in;
		when &quot;00010&quot; =&gt;
			temp := std_logic_vector(unsigned(a_in) + unsigned(b_in));
		when &quot;00110&quot; =&gt;
			temp := std_logic_vector(signed(unsigned(a_in) - unsigned(b_in)));
		when &quot;00100&quot; =&gt;
			temp :=	std_logic_vector(shift_left(unsigned(a_in), to_integer(unsigned(b_in(4 downto 0)))));
		when &quot;00101&quot; =&gt;
			temp :=	std_logic_vector(shift_right(unsigned(a_in), to_integer(unsigned(b_in(4 downto 0)))));
		when &quot;01000&quot; =&gt; -- Soma 4 bits
                	temp(3 downto 0) := result(3 downto 0);
                	temp(31 downto 4) := (others =&gt; &apos;0&apos;);
		when &quot;01100&quot; =&gt; -- Subtração 4 bits
			temp(3 downto 0) := result(3 downto 0);
                	temp(31 downto 4) := (others =&gt; &apos;0&apos;);
            	when &quot;01001&quot; =&gt; -- Soma 8 bits
                	temp(7 downto 0) := result(7 downto 0);
                	temp(31 downto 8) := (others =&gt; &apos;0&apos;);
		when &quot;01101&quot; =&gt; -- Subtração 8 bits
                	temp(7 downto 0) := result(7 downto 0);
                	temp(31 downto 8) := (others =&gt; &apos;0&apos;);
            	when &quot;01010&quot; =&gt; -- Soma 16 bits
                	temp(15 downto 0) := result(15 downto 0);
                	temp(31 downto 16) := (others =&gt; &apos;0&apos;);
		when &quot;01110&quot; =&gt; -- Subtração 16 bits
                	temp(15 downto 0) := result(15 downto 0);
                	temp(31 downto 16) := (others =&gt; &apos;0&apos;);
		when &quot;10000&quot; =&gt; -- SLV 4 bits
            		for i in 0 to 7 loop
                		temp(i*4+3 downto i*4) := std_logic_vector(shift_left(unsigned(a_in(i*4+3 downto i*4)), to_integer(unsigned(b_in(4 downto 0)))));
            		end loop;
        	when &quot;10001&quot; =&gt; -- SlV 8 bits
            		for i in 0 to 3 loop
                		temp(i*8+7 downto i*8) := std_logic_vector(shift_left(unsigned(a_in(i*8+7 downto i*8)), to_integer(unsigned(b_in(4 downto 0)))));
            		end loop;
       	 	when &quot;10010&quot; =&gt; -- SLV 16 bits
            		for i in 0 to 1 loop
                		temp(i*16+15 downto i*16) := std_logic_vector(shift_left(unsigned(a_in(i*16+15 downto i*16)), to_integer(unsigned(b_in(4 downto 0)))));
            		end loop;
        	when &quot;11000&quot; =&gt; -- SRV 4 bits
            		for i in 0 to 7 loop
                		temp(i*4+3 downto i*4) := std_logic_vector(shift_right(unsigned(a_in(i*4+3 downto i*4)), to_integer(unsigned(b_in(4 downto 0)))));
            		end loop;
        	when &quot;11001&quot; =&gt; -- SRV 8 bits
            		for i in 0 to 3 loop
                		temp(i*8+7 downto i*8) := std_logic_vector(shift_right(unsigned(a_in(i*8+7 downto i*8)), to_integer(unsigned(b_in(4 downto 0)))));
            		end loop;
        	when &quot;11010&quot; =&gt; -- SRV 16 bits
            		for i in 0 to 1 loop
                		temp(i*16+15 downto i*16) := std_logic_vector(shift_right(unsigned(a_in(i*16+15 downto i*16)), to_integer(unsigned(b_in(4 downto 0)))));
            		end loop;
		when others =&gt;
			temp := (others =&gt; &apos;0&apos;);
	end case;
	
	result_out &lt;= temp;
	
	if temp=temp2 then
    		zero_flag_out &lt;= &apos;1&apos;;
	else
    		zero_flag_out &lt;= &apos;0&apos;;
	end if;
	
    end if;
  end process;
end Behavioral;</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>9</int>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>result_out:32,zero_flag_out</string>
        </entry>
      </elementAttributes>
      <pos x="580" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>out</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="860" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>clk</string>
        </entry>
      </elementAttributes>
      <pos x="500" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>reset</string>
        </entry>
      </elementAttributes>
      <pos x="540" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>a</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="380" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>b</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="340" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>c</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="380" y="580"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>zero_flag</string>
        </entry>
      </elementAttributes>
      <pos x="900" y="520"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="440" y="400"/>
      <p2 x="580" y="400"/>
    </wire>
    <wire>
      <p1 x="440" y="480"/>
      <p2 x="560" y="480"/>
    </wire>
    <wire>
      <p1 x="540" y="420"/>
      <p2 x="580" y="420"/>
    </wire>
    <wire>
      <p1 x="380" y="580"/>
      <p2 x="440" y="580"/>
    </wire>
    <wire>
      <p1 x="500" y="360"/>
      <p2 x="580" y="360"/>
    </wire>
    <wire>
      <p1 x="760" y="360"/>
      <p2 x="860" y="360"/>
    </wire>
    <wire>
      <p1 x="440" y="440"/>
      <p2 x="540" y="440"/>
    </wire>
    <wire>
      <p1 x="560" y="440"/>
      <p2 x="580" y="440"/>
    </wire>
    <wire>
      <p1 x="780" y="520"/>
      <p2 x="900" y="520"/>
    </wire>
    <wire>
      <p1 x="540" y="380"/>
      <p2 x="580" y="380"/>
    </wire>
    <wire>
      <p1 x="760" y="380"/>
      <p2 x="780" y="380"/>
    </wire>
    <wire>
      <p1 x="380" y="380"/>
      <p2 x="440" y="380"/>
    </wire>
    <wire>
      <p1 x="340" y="460"/>
      <p2 x="440" y="460"/>
    </wire>
    <wire>
      <p1 x="560" y="440"/>
      <p2 x="560" y="480"/>
    </wire>
    <wire>
      <p1 x="440" y="480"/>
      <p2 x="440" y="580"/>
    </wire>
    <wire>
      <p1 x="440" y="440"/>
      <p2 x="440" y="460"/>
    </wire>
    <wire>
      <p1 x="440" y="380"/>
      <p2 x="440" y="400"/>
    </wire>
    <wire>
      <p1 x="540" y="300"/>
      <p2 x="540" y="380"/>
    </wire>
    <wire>
      <p1 x="540" y="420"/>
      <p2 x="540" y="440"/>
    </wire>
    <wire>
      <p1 x="780" y="380"/>
      <p2 x="780" y="520"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>
