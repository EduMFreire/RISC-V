<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>Instruction_parser_2</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>instruction_in:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>13</int>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>opcode_out:7,rd_out:5,rs1_out:5,rs2_out:5,funct3_out:3,funct7_out:7,imm_out:32,inst_type_out:3</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Instruction_parser_2 is
	port (
		instruction_in : in std_logic_vector(31 downto 0);
		opcode_out      : out std_logic_vector(6 downto 0);  -- bits 6-0
		rd_out          : out std_logic_vector(4 downto 0);
        	rs1_out         : out std_logic_vector(4 downto 0);
        	rs2_out         : out std_logic_vector(4 downto 0);
		funct3_out	: out std_logic_vector(2 downto 0);
		funct7_out	: out std_logic_vector(6 downto 0);
		imm_out		: out std_logic_vector(31 downto 0);
		inst_type_out   : out std_logic_vector(2 downto 0)
	);
end entity Instruction_parser_2;


architecture behavioral of Instruction_parser_2 is
begin
  process(instruction_in)
  begin
    opcode_out &lt;= instruction_in(6  downto 0);
    rd_out     &lt;= instruction_in(11 downto 7);
    rs1_out    &lt;= instruction_in(19 downto 15);
    rs2_out    &lt;= instruction_in(24 downto 20);
    funct3_out &lt;= instruction_in(14 downto 12);
    funct7_out &lt;= instruction_in(31 downto 25);

    case opcode_out is
      when &quot;0110011&quot; =&gt;  -- R‑type
        inst_type_out &lt;= &quot;000&quot;;
        imm_out       &lt;= (others =&gt; &apos;0&apos;);

      when &quot;0010111&quot; =&gt;  -- U‑type (AUIPC)
        inst_type_out &lt;= &quot;001&quot;;
        imm_out       &lt;= std_logic_vector(to_unsigned(0,12)) &amp; instruction_in(31 downto 12);

      when &quot;0010011&quot; | &quot;0000011&quot; | &quot;1100111&quot; =&gt;  -- I‑type
        inst_type_out &lt;= &quot;010&quot;;
        imm_out       &lt;= std_logic_vector(to_unsigned(0,20)) &amp; instruction_in(31 downto 20);

      when &quot;0100011&quot; =&gt;  -- S‑type (STORE)
        inst_type_out &lt;= &quot;011&quot;;
        imm_out       &lt;= std_logic_vector(to_unsigned(0,20))
                         &amp; instruction_in(31 downto 25)
                         &amp; instruction_in(11 downto 7);

      when &quot;1100011&quot; =&gt;  -- B‑type (BRANCH)
        inst_type_out &lt;= &quot;101&quot;;
        imm_out       &lt;= std_logic_vector(to_unsigned(0,20))
                         &amp; instruction_in(31)
                         &amp; instruction_in(7)
                         &amp; instruction_in(30 downto 25)
                         &amp; instruction_in(11 downto 8)
                         &amp; &apos;0&apos;;

      when &quot;1101111&quot; =&gt;  -- J‑type (JAL)
        inst_type_out &lt;= &quot;100&quot;;
        imm_out       &lt;= std_logic_vector(to_unsigned(0,12))
                         &amp; instruction_in(31)
                         &amp; instruction_in(19 downto 12)
                         &amp; instruction_in(20)
                         &amp; instruction_in(30 downto 21)
                         &amp; &apos;0&apos;;

      when others =&gt;
        inst_type_out &lt;= &quot;XXX&quot;;
        imm_out       &lt;= (others =&gt; &apos;0&apos;);
    end case;
  end process;
end architecture behavioral;</string>
        </entry>
      </elementAttributes>
      <pos x="560" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="480" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>7</int>
        </entry>
      </elementAttributes>
      <pos x="1080" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="1120" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="1080" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="1120" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>3</int>
        </entry>
      </elementAttributes>
      <pos x="1080" y="480"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>7</int>
        </entry>
      </elementAttributes>
      <pos x="1120" y="560"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="1200" y="620"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>3</int>
        </entry>
      </elementAttributes>
      <pos x="920" y="740"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="860" y="160"/>
      <p2 x="1080" y="160"/>
    </wire>
    <wire>
      <p1 x="980" y="320"/>
      <p2 x="1080" y="320"/>
    </wire>
    <wire>
      <p1 x="820" y="480"/>
      <p2 x="920" y="480"/>
    </wire>
    <wire>
      <p1 x="820" y="420"/>
      <p2 x="1080" y="420"/>
    </wire>
    <wire>
      <p1 x="820" y="360"/>
      <p2 x="940" y="360"/>
    </wire>
    <wire>
      <p1 x="820" y="460"/>
      <p2 x="980" y="460"/>
    </wire>
    <wire>
      <p1 x="980" y="620"/>
      <p2 x="1200" y="620"/>
    </wire>
    <wire>
      <p1 x="940" y="240"/>
      <p2 x="1120" y="240"/>
    </wire>
    <wire>
      <p1 x="820" y="400"/>
      <p2 x="1120" y="400"/>
    </wire>
    <wire>
      <p1 x="1020" y="560"/>
      <p2 x="1120" y="560"/>
    </wire>
    <wire>
      <p1 x="480" y="340"/>
      <p2 x="560" y="340"/>
    </wire>
    <wire>
      <p1 x="820" y="340"/>
      <p2 x="860" y="340"/>
    </wire>
    <wire>
      <p1 x="820" y="440"/>
      <p2 x="1020" y="440"/>
    </wire>
    <wire>
      <p1 x="820" y="380"/>
      <p2 x="980" y="380"/>
    </wire>
    <wire>
      <p1 x="980" y="320"/>
      <p2 x="980" y="380"/>
    </wire>
    <wire>
      <p1 x="980" y="460"/>
      <p2 x="980" y="620"/>
    </wire>
    <wire>
      <p1 x="1080" y="420"/>
      <p2 x="1080" y="480"/>
    </wire>
    <wire>
      <p1 x="920" y="480"/>
      <p2 x="920" y="740"/>
    </wire>
    <wire>
      <p1 x="860" y="160"/>
      <p2 x="860" y="340"/>
    </wire>
    <wire>
      <p1 x="940" y="240"/>
      <p2 x="940" y="360"/>
    </wire>
    <wire>
      <p1 x="1020" y="440"/>
      <p2 x="1020" y="560"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>