<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>register_file</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,reset,reg_write,rs1_addr:5,rs2_addr:5,rd_addr:5,rd_data:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity register_file is
    port (
        clk      : in  std_logic;
        reset    : in  std_logic;
        reg_write: in  std_logic; -- Control signal to enable writing
        rs1_addr : in  std_logic_vector(4 downto 0);
        rs2_addr : in  std_logic_vector(4 downto 0);
        rd_addr  : in  std_logic_vector(4 downto 0);
        rd_data  : in  std_logic_vector(31 downto 0);
        rs1_data : out std_logic_vector(31 downto 0);
        rs2_data : out std_logic_vector(31 downto 0)
    );
end entity register_file;

architecture behavioral of register_file is
    type reg_array is array (0 to 31) of std_logic_vector(31 downto 0);
    signal registers : reg_array := (others =&gt; (others =&gt; &apos;0&apos;));
begin

    -- Write Process: Synchronous to the rising edge (first half)
    write_proc: process(clk, reset)
    begin
        if reset = &apos;1&apos; then
            for i in 0 to 31 loop
                registers(i) &lt;= (others =&gt; &apos;0&apos;);
            end loop;
        elsif rising_edge(clk) then
            if reg_write = &apos;1&apos; and rd_addr /= &quot;00000&quot; then
                registers(to_integer(unsigned(rd_addr))) &lt;= rd_data;
            end if;
        end if;
    end process write_proc;

    -- Read Process: Synchronous to the falling edge (second half)
    read_proc: process(clk, reset)
    begin
        if reset = &apos;1&apos; then
            rs1_data &lt;= (others =&gt; &apos;0&apos;);
            rs2_data &lt;= (others =&gt; &apos;0&apos;);
        elsif falling_edge(clk) then
            -- Read rs1
            if rs1_addr = &quot;00000&quot; then
                rs1_data &lt;= (others =&gt; &apos;0&apos;);
            else
                rs1_data &lt;= registers(to_integer(unsigned(rs1_addr)));
            end if;

            -- Read rs2
            if rs2_addr = &quot;00000&quot; then
                rs2_data &lt;= (others =&gt; &apos;0&apos;);
            else
                rs2_data &lt;= registers(to_integer(unsigned(rs2_addr)));
            end if;
        end if;
    end process read_proc;

end architecture behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>rs1_data:32,rs2_data:32</string>
        </entry>
      </elementAttributes>
      <pos x="620" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>instruction_parser</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>instruction_i:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;

entity instruction_parser is
    port (
        instruction_i : in  std_logic_vector(31 downto 0); -- 32-bit RISC-V instruction

        -- Extracted fields
        opcode_o      : out std_logic_vector(6 downto 0);  -- bits 6-0
        rd_o          : out std_logic_vector(4 downto 0);  -- bits 11-7
        funct_3       : out std_logic_vector(2 downto 0);  -- bits 14-12
        rs1_o         : out std_logic_vector(4 downto 0);  -- bits 19-15
        rs2_o         : out std_logic_vector(4 downto 0); -- bits 24-20
        funct_7       : out std_logic_vector(6 downto 0)
    );
end entity instruction_parser;

architecture behavioral of instruction_parser is
begin

    -- Simple direct assignments for common fields
    opcode_o &lt;= instruction_i(6 downto 0);
    rd_o     &lt;= instruction_i(11 downto 7);
    funct_3  &lt;= instruction_i(14 downto 12);
    rs1_o    &lt;= instruction_i(19 downto 15);
    rs2_o    &lt;= instruction_i(24 downto 20);
    funct_7  &lt;= instruction_i(31 downto 25);

end architecture behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>opcode_o:7,rd_o:5,funct_3:3,rs1_o:5,rs2_o:5,funct_7:7</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
      </elementAttributes>
      <pos x="40" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>control_unit</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>opcode:7</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;

entity control_unit is
    port (
        -- Inputs
        opcode      : in  std_logic_vector(6 downto 0); -- 7-bit opcode from the instruction

        -- Outputs: Control signals for the datapath
        alu_op      : out std_logic_vector(1 downto 0); -- Controls the ALU&apos;s main operation:
                                                        -- &quot;00&quot; = Add (for Loads/Stores/AUIPC/LUI/JAL/JALR address calc or pass-through)
                                                        -- &quot;01&quot; = Subtract (for Branches for comparison)
                                                        -- &quot;10&quot; = R-type operation (further decoded by funct3/funct7)
                                                        -- &quot;11&quot; = I-type operation (further decoded by funct3)
        alu_src     : out std_logic;                    -- Selects the second ALU source:
                                                        -- &apos;0&apos; = rs2 data (for R-type)
                                                        -- &apos;1&apos; = immediate (for I, S, B, U, J-types)
        mem_read    : out std_logic;                    -- Enables reading from data memory
        mem_write   : out std_logic;                    -- Enables writing to data memory
        mem_to_reg  : out std_logic;                    -- Selects if data from memory goes to the register file (for loads)
        reg_write   : out std_logic;                    -- Enable writing to the register file
        branch      : out std_logic;                    -- Indicates a conditional branch instruction (for enabling branch logic)
        jump        : out std_logic;                    -- Indicates an unconditional jump instruction (JAL, JALR)
        pc_sel      : out std_logic                     -- Selects next PC: &apos;0&apos; = PC+4, &apos;1&apos; = Branch/Jump Target
    );
end entity control_unit;

architecture behavioral of control_unit is
    -- Define the opcodes for different instruction types as constants for readability
    constant R_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;0110011&quot;; -- OP (e.g., ADD, SUB, AND, OR, XOR)
    constant I_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;0010011&quot;; -- OP-IMM (e.g., ADDI, ANDI, ORI)
    constant L_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;0000011&quot;; -- LOAD (e.g., LW)
    constant S_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;0100011&quot;; -- STORE (e.g., SW)
    constant B_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;1100011&quot;; -- BRANCH (e.g., BEQ, BNE)
    constant JAL_OP      : std_logic_vector(6 downto 0) := &quot;1101111&quot;; -- JAL (Jump and Link)
    constant JALR_OP     : std_logic_vector(6 downto 0) := &quot;1100111&quot;; -- JALR (Jump and Link Register)
    constant LUI_OP      : std_logic_vector(6 downto 0) := &quot;0110111&quot;; -- LUI (Load Upper Immediate)
    constant AUIPC_OP    : std_logic_vector(6 downto 0) := &quot;0010111&quot;; -- AUIPC (Add Upper Immediate to PC)

begin

    -- Main control logic process.
    -- This process is sensitive to &apos;opcode&apos;.
    -- All output signals must be assigned within this single process to avoid latches.
    process(opcode)
    begin
        -- safe default (e.g., NOP-like behavior, no writes, no branches/jumps).
        reg_write  &lt;= &apos;0&apos;;
        mem_to_reg &lt;= &apos;0&apos;;
        mem_read   &lt;= &apos;0&apos;;
        mem_write  &lt;= &apos;0&apos;;
        alu_src    &lt;= &apos;0&apos;;
        branch     &lt;= &apos;0&apos;;
        jump       &lt;= &apos;0&apos;;
        pc_sel     &lt;= &apos;0&apos;; -- Default to PC+4
        alu_op     &lt;= &quot;00&quot;; -- Default to &quot;00&quot; (Add/Pass-through) for ALU

        -- Use a case statement to decode the opcode and assert specific control signals.
        case opcode is
            -- R-Type instructions (e.g., ADD, SUB, AND, OR)
            when R_TYPE_OP =&gt;
                reg_write  &lt;= &apos;1&apos;;
                alu_src    &lt;= &apos;0&apos;;
                alu_op     &lt;= &quot;10&quot;;

            -- I-Type instructions (Arithmetic/Logical with Immediate, excluding Loads/JALR)
            when I_TYPE_OP =&gt;
                reg_write  &lt;= &apos;1&apos;;
                alu_src    &lt;= &apos;1&apos;;
                alu_op     &lt;= &quot;11&quot;;

            -- Load instructions (I-type, e.g., LW)
            when L_TYPE_OP =&gt;
                reg_write  &lt;= &apos;1&apos;;
                mem_to_reg &lt;= &apos;1&apos;;
                mem_read   &lt;= &apos;1&apos;;
                alu_src    &lt;= &apos;1&apos;;
                alu_op     &lt;= &quot;00&quot;;

            -- Store instructions (S-type, e.g., SW)
            when S_TYPE_OP =&gt;
                mem_write  &lt;= &apos;1&apos;;
                alu_src    &lt;= &apos;1&apos;;
                alu_op     &lt;= &quot;00&quot;;

            -- Branch instructions (B-type, e.g., BEQ, BNE)
            when B_TYPE_OP =&gt;
                branch     &lt;= &apos;1&apos;;    -- This signal enables the branch comparison logic
                pc_sel     &lt;= &apos;1&apos;;    -- Take jump target (maybe)
                alu_op     &lt;= &quot;01&quot;;   -- ALU performs subtraction (for comparison)

            -- LUI (Load Upper Immediate)
            when LUI_OP =&gt;
                reg_write  &lt;= &apos;1&apos;;
                alu_src    &lt;= &apos;1&apos;;
                alu_op     &lt;= &quot;00&quot;;

            -- AUIPC (Add Upper Immediate to PC)
            when AUIPC_OP =&gt;
                reg_write  &lt;= &apos;1&apos;;
                alu_src    &lt;= &apos;1&apos;;
                alu_op     &lt;= &quot;00&quot;;

            -- JAL (Jump and Link)
            when JAL_OP =&gt;
                reg_write  &lt;= &apos;1&apos;;
                jump       &lt;= &apos;1&apos;;    -- This signal indicates an unconditional jump
                pc_sel     &lt;= &apos;1&apos;;    -- Take jump target 
                alu_op     &lt;= &quot;00&quot;;   -- ALU may be used to calculate target address (PC + immediate) or pass PC+4

            -- JALR (Jump and Link Register)
            when JALR_OP =&gt;
                reg_write  &lt;= &apos;1&apos;;
                jump       &lt;= &apos;1&apos;;    -- This signal indicates an unconditional jump
                pc_sel     &lt;= &apos;1&apos;;    -- Take jump target 
                alu_src    &lt;= &apos;1&apos;;    -- Immediate is used by ALU (for address calculation)
                alu_op     &lt;= &quot;00&quot;;   -- ALU performs addition (rs1 + immediate)

            when others =&gt;
                null;
        end case;
    end process;

end architecture behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>alu_op:2,alu_src,mem_read,mem_write,mem_to_reg,reg_write,branch,jump,pc_sel</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
      </elementAttributes>
      <pos x="580" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>immediate_extractor</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>instruction_i:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all; -- For signed arithmetic and type conversions

entity immediate_extractor is
    port (
        instruction_i : in  std_logic_vector(31 downto 0); -- 32-bit RISC-V instruction input
        immediate_o   : out std_logic_vector(31 downto 0)  -- 32-bit sign-extended immediate output
    );
end entity immediate_extractor;

architecture behavioral of immediate_extractor is
    -- Internal signal to hold the opcode (bits 6 downto 0) for use in the process.
    signal opcode_s : std_logic_vector(6 downto 0);
begin

    -- Extract the opcode from the instruction. This assignment is concurrent.
    opcode_s &lt;= instruction_i(6 downto 0);

    -- This process block implements the combinational logic for immediate extraction.
    -- The sensitivity list includes all signals that, when changed, should
    -- re-evaluate the logic inside the process.
    process(instruction_i, opcode_s)
        -- Declare a local variable to build the immediate value before assigning it
        -- to the output signal. Variables are evaluated immediately within the process.
        variable imm : std_logic_vector(31 downto 0);
    begin
        -- Use a case statement to select the immediate extraction logic
        -- based on the instruction&apos;s opcode.
        case opcode_s is
            -- I-type immediate (Load, Op-Imm, JALR)
            -- Opcode values: 0x03 (LOAD), 0x13 (OP-IMM), 0x67 (JALR)
            -- Format: imm[11:0] is instruction[31:20]
            when &quot;0000011&quot; | &quot;0010011&quot; | &quot;1100111&quot; =&gt;
                -- Sign-extend the 12-bit immediate: replicate bit 31 of the instruction
                -- (which is imm[11]) across the higher bits (31 downto 12) of the 32-bit immediate.
                imm := (others =&gt; instruction_i(31));
                -- Place the 12-bit immediate into the lower 12 bits of &apos;imm&apos;.
                imm(11 downto 0) := instruction_i(31 downto 20);
                -- Assign the constructed immediate to the output.
                immediate_o &lt;= imm;

            -- S-type immediate (Store)
            -- Opcode value: 0x23 (STORE)
            -- Format: imm[11:5] from instruction[31:25], imm[4:0] from instruction[11:7]
            -- Reconstructed: imm[11:5] &lt;&lt; 5 | imm[4:0]
            when &quot;0100011&quot; =&gt;
                -- Sign-extend the 12-bit immediate: use bit 31 of the instruction
                -- (which is imm[11]) for sign extension.
                imm := (others =&gt; instruction_i(31));
                -- Place the high part of the immediate (imm[11:5]) into its position.
                imm(11 downto 5) := instruction_i(31 downto 25);
                -- Place the low part of the immediate (imm[4:0]) into its position.
                imm(4 downto 0)  := instruction_i(11 downto 7);
                -- Assign the constructed immediate to the output.
                immediate_o &lt;= imm;

            -- B-type immediate (Branch)
            -- Opcode value: 0x63 (BRANCH)
            -- Format: imm[12|10:5|4:1|11]
            -- Bits: instruction[31] (imm[12]), instruction[30:25] (imm[10:5]),
            --       instruction[11:8] (imm[4:1]), instruction[7] (imm[11])
            -- Reconstructed: imm[12] &lt;&lt; 12 | imm[11] &lt;&lt; 11 | imm[10:5] &lt;&lt; 5 | imm[4:1] &lt;&lt; 1 (imm[0] is always &apos;0&apos;)
            when &quot;1100011&quot; =&gt;
                -- Sign-extend the 13-bit immediate: use bit 31 of the instruction
                -- (which is imm[12]) for sign extension.
                imm := (others =&gt; instruction_i(31));
                -- Place fragmented immediate bits into their correct positions.
                imm(12)        := instruction_i(31);         -- imm[12]
                imm(11)        := instruction_i(7);          -- imm[11]
                imm(10 downto 5) := instruction_i(30 downto 25); -- imm[10:5]
                imm(4 downto 1) := instruction_i(11 downto 8);  -- imm[4:1]
                imm(0)         := &apos;0&apos;;                       -- imm[0] is always 0 for branches
                -- Assign the constructed immediate to the output.
                immediate_o &lt;= imm;

            -- U-type immediate (LUI, AUIPC)
            -- Opcode values: 0x37 (LUI), 0x17 (AUIPC)
            -- Format: imm[31:12] is instruction[31:12]
            -- This immediate is already effectively shifted left by 12 bits.
            when &quot;0110111&quot; | &quot;0010111&quot; =&gt;
                -- Concatenate the upper 20 bits of the instruction with 12 zeros.
                -- No explicit sign extension needed, as the value is simply the upper bits.
                imm := instruction_i(31 downto 12) &amp; (11 downto 0 =&gt; &apos;0&apos;);
                -- Assign the constructed immediate to the output.
                immediate_o &lt;= imm;

            -- J-type immediate (JAL)
            -- Opcode value: 0x6F (JAL)
            -- Format: imm[20|10:1|11|19:12]
            -- Bits: instruction[31] (imm[20]), instruction[19:12] (imm[19:12]),
            --       instruction[20] (imm[11]), instruction[30:21] (imm[10:1])
            -- Reconstructed: imm[20] &lt;&lt; 20 | imm[19:12] &lt;&lt; 12 | imm[11] &lt;&lt; 11 | imm[10:1] &lt;&lt; 1 (imm[0] is always &apos;0&apos;)
            when &quot;1101111&quot; =&gt;
                -- Sign-extend the 21-bit immediate: use bit 31 of the instruction
                -- (which is imm[20]) for sign extension.
                imm := (others =&gt; instruction_i(31));
                -- Place fragmented immediate bits into their correct positions.
                imm(20)        := instruction_i(31);         -- imm[20]
                imm(19 downto 12) := instruction_i(19 downto 12); -- imm[19:12]
                imm(11)        := instruction_i(20);         -- imm[11]
                imm(10 downto 1) := instruction_i(30 downto 21); -- imm[10:1]
                imm(0)         := &apos;0&apos;;                       -- imm[0] is always 0 for jumps
                -- Assign the constructed immediate to the output.
                immediate_o &lt;= imm;

            -- Default case: For unrecognized opcodes, output all zeros.
            when others =&gt;
                imm := (others =&gt; &apos;0&apos;);
                immediate_o &lt;= imm;
        end case;
    end process;

end architecture behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>immediate_o:32</string>
        </entry>
      </elementAttributes>
      <pos x="580" y="680"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>7</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>bin</intFormat>
        </entry>
      </elementAttributes>
      <pos x="500" y="140"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>dec</intFormat>
        </entry>
      </elementAttributes>
      <pos x="360" y="720"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>dec</intFormat>
        </entry>
      </elementAttributes>
      <pos x="380" y="760"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>dec</intFormat>
        </entry>
      </elementAttributes>
      <pos x="400" y="800"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>ID_EX_Pipeline</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,reset,ALUOp_in:2,ALUSrc_in,memRead_in,memWrite_in,memToReg_in,regWrite_in,Rs1_data_in:32,Rs2_data_in:32,Imm_in:32,Rs1_in:5,Rs2_in:5,Rd_in:5,funct_3_in:3,funct_7_in:7,bubble</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity ID_EX_Pipeline is
    Port (
        clk           : in  std_logic;
        reset         : in  std_logic;

        -- Control signals
        ALUOp_in      : in  std_logic_vector(1 downto 0);
        ALUSrc_in     : in  std_logic;
        memRead_in   : in  std_logic;
        memWrite_in  : in  std_logic;
        memToReg_in  : in  std_logic;
        regWrite_in  : in  std_logic;
        -- Data signals
        Rs1_data_in  : in  std_logic_vector(31 downto 0);
        Rs2_data_in  : in  std_logic_vector(31 downto 0);
        Imm_in : in  std_logic_vector(31 downto 0);
        Rs1_in         : in  std_logic_vector(4 downto 0);
        Rs2_in         : in  std_logic_vector(4 downto 0);
        Rd_in         : in  std_logic_vector(4 downto 0);
        funct_3_in      : in  std_logic_vector(2 downto 0);
        funct_7_in      : in  std_logic_vector(6 downto 0); 
        
        bubble        : in std_logic; -- Input de bubble síncrono

        -- Control outputs
        ALUOp_out     : out std_logic_vector(1 downto 0);
        ALUSrc_out    : out std_logic;
        memRead_out   : out std_logic;
        memWrite_out  : out std_logic;
        memToReg_out  : out std_logic;
        regWrite_out  : out std_logic;
        -- Data outputs
        Rs1_data_out       : out std_logic_vector(31 downto 0);
        Rs2_data_out       : out std_logic_vector(31 downto 0);
        Imm_out       : out std_logic_vector(31 downto 0);
        Rs1_out       : out std_logic_vector(4 downto 0);
        Rs2_out       : out std_logic_vector(4 downto 0);
        Rd_out        : out std_logic_vector(4 downto 0);
        funct_3_out     : out  std_logic_vector(2 downto 0);
        funct_7_5     : out  std_logic
    );
end ID_EX_Pipeline;

architecture Behavioral of ID_EX_Pipeline is
begin
    process(clk, reset)
    begin
        if reset = &apos;1&apos; then
            -- On reset, clear all outputs
            ALUOp_out      &lt;= (others =&gt; &apos;0&apos;);
            ALUSrc_out     &lt;= &apos;0&apos;;
            memRead_out    &lt;= &apos;0&apos;;
            memWrite_out   &lt;= &apos;0&apos;;
            memToReg_out   &lt;= &apos;0&apos;;
            regWrite_out   &lt;= &apos;0&apos;;
            Rs1_data_out       &lt;= (others =&gt; &apos;0&apos;);
            Rs2_data_out       &lt;= (others =&gt; &apos;0&apos;);
            Imm_out       &lt;= (others =&gt; &apos;0&apos;);
            Rs1_out         &lt;= (others =&gt; &apos;0&apos;);
            Rs2_out         &lt;= (others =&gt; &apos;0&apos;);
            Rd_out         &lt;= (others =&gt; &apos;0&apos;);
        elsif rising_edge(clk) then
            if bubble = &apos;1&apos; then
                ALUOp_out      &lt;= (others =&gt; &apos;0&apos;);
                ALUSrc_out     &lt;= &apos;0&apos;;
                memRead_out    &lt;= &apos;0&apos;;
                memWrite_out   &lt;= &apos;0&apos;;
                memToReg_out   &lt;= &apos;0&apos;;
                regWrite_out   &lt;= &apos;0&apos;;
                Rs1_data_out       &lt;= (others =&gt; &apos;0&apos;);
                Rs2_data_out       &lt;= (others =&gt; &apos;0&apos;);
                Imm_out       &lt;= (others =&gt; &apos;0&apos;);
                Rs1_out         &lt;= (others =&gt; &apos;0&apos;);
                Rs2_out         &lt;= (others =&gt; &apos;0&apos;);
                Rd_out         &lt;= (others =&gt; &apos;0&apos;);
            else
                -- On clock edge, latch inputs to outputs
                ALUOp_out      &lt;= ALUOp_in;
                ALUSrc_out     &lt;= ALUSrc_in;
                memRead_out    &lt;= memRead_in;
                memWrite_out   &lt;= memWrite_in;
                memToReg_out   &lt;= memToReg_in;
                regWrite_out   &lt;= regWrite_in;
                Rs1_data_out       &lt;= Rs1_data_in;
                Rs2_data_out       &lt;= Rs2_data_in;
                Imm_out       &lt;= Imm_in;
                Rs1_out         &lt;= Rs1_in;
                Rs2_out         &lt;= Rs2_in;
                Rd_out         &lt;= Rd_in;
                funct_3_out &lt;= funct_3_in;
                funct_7_5 &lt;= funct_7_in(5);
            end if;
        end if;
    end process;
end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>ALUOp_out:2,ALUSrc_out,memRead_out,memWrite_out,memToReg_out,regWrite_out,Rs1_data_out:32,Rs2_data_out:32,Imm_out:32,Rs1_out:5,Rs2_out:5,Rd_out:5,funct_3_out:3,funct_7_5</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
      </elementAttributes>
      <pos x="1200" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
        <entry>
          <string>intFormat</string>
          <intFormat>decSigned</intFormat>
        </entry>
      </elementAttributes>
      <pos x="920" y="740"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="600" y="-20"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="640" y="-20"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="680" y="-20"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="720" y="-20"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="760" y="-20"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="800" y="-20"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="840" y="-20"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="880" y="-20"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>EX_MEM_Pipeline</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,reset,MemRead_in,MemWrite_in,MemToReg_in,RegWrite_in,ALUResult_in:32,WriteData_in:32,Rd_in:5,bubble</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity EX_MEM_Pipeline is
    Port (
        clk          : in  std_logic;
        reset        : in  std_logic;

        -- Control signals
        MemRead_in   : in  std_logic;
        MemWrite_in  : in  std_logic;
        MemToReg_in  : in  std_logic;
        RegWrite_in  : in  std_logic;
        -- Data signals
        ALUResult_in : in  std_logic_vector(31 downto 0);
        WriteData_in : in  std_logic_vector(31 downto 0);
        Rd_in       : in  std_logic_vector(4 downto 0);
        bubble       : in std_logic; -- Entrada de bubble síncrona

        -- Outputs to MEM stage
        MemRead_out  : out std_logic;
        MemWrite_out : out std_logic;
        MemToReg_out : out std_logic;
        RegWrite_out : out std_logic;
        ALUResult_out: out std_logic_vector(31 downto 0);
        WriteData_out: out std_logic_vector(31 downto 0);
        Rd_out       : out std_logic_vector(4 downto 0)
    );
end EX_MEM_Pipeline;

architecture Behavioral of EX_MEM_Pipeline is
begin
    process(clk, reset)
    begin
        if reset = &apos;1&apos; then
            MemRead_out   &lt;= &apos;0&apos;;
            MemWrite_out  &lt;= &apos;0&apos;;
            RegWrite_out  &lt;= &apos;0&apos;;
            MemToReg_out  &lt;= &apos;0&apos;;
            ALUResult_out &lt;= (others =&gt; &apos;0&apos;);
            WriteData_out &lt;= (others =&gt; &apos;0&apos;);
            Rd_out   &lt;= (others =&gt; &apos;0&apos;);
        elsif rising_edge(clk) then
            if bubble = &apos;1&apos; then

                MemRead_out   &lt;= &apos;0&apos;;
                MemWrite_out  &lt;= &apos;0&apos;;
                RegWrite_out  &lt;= &apos;0&apos;;
                MemToReg_out  &lt;= &apos;0&apos;;
                ALUResult_out &lt;= (others =&gt; &apos;0&apos;);
                WriteData_out &lt;= (others =&gt; &apos;0&apos;);
                Rd_out   &lt;= (others =&gt; &apos;0&apos;);

            else
                MemRead_out   &lt;= MemRead_in;
                MemWrite_out  &lt;= MemWrite_in;
                RegWrite_out  &lt;= RegWrite_in;
                MemToReg_out  &lt;= MemToReg_in;
                ALUResult_out &lt;= ALUResult_in;
                WriteData_out &lt;= WriteData_in;
                Rd_out   &lt;= Rd_in;
            end if;
        end if;
    end process;
end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>MemRead_out,MemWrite_out,MemToReg_out,RegWrite_out,ALUResult_out:32,WriteData_out:32,Rd_out:5</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>20</int>
        </entry>
      </elementAttributes>
      <pos x="2260" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>MEM_WB_Pipeline</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,reset,MemToReg_in,RegWrite_in,ReadData_in:32,ALUResult_in:32,Rd_in:5</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity MEM_WB_Pipeline is
    Port (
        clk           : in  std_logic;
        reset         : in  std_logic;
        -- Control signals
        MemToReg_in   : in  std_logic;
        RegWrite_in   : in  std_logic;
        -- Data signals
        ReadData_in   : in  std_logic_vector(31 downto 0);
        ALUResult_in  : in  std_logic_vector(31 downto 0);
        Rd_in         : in  std_logic_vector(4 downto 0);

        -- Outputs to WB stage
        MemToReg_out  : out std_logic;
        RegWrite_out  : out std_logic;
        ALUResult_out : out std_logic_vector(31 downto 0);
        ReadData_out  : out std_logic_vector(31 downto 0);
        Rd_out   : out std_logic_vector(4 downto 0)
    );
end MEM_WB_Pipeline;

architecture Behavioral of MEM_WB_Pipeline is
begin
    process(clk, reset)
    begin
        if reset = &apos;1&apos; then
            RegWrite_out  &lt;= &apos;0&apos;;
            MemToReg_out  &lt;= &apos;0&apos;;
            ReadData_out  &lt;= (others =&gt; &apos;0&apos;);
            ALUResult_out &lt;= (others =&gt; &apos;0&apos;);
            Rd_out   &lt;= (others =&gt; &apos;0&apos;);
        elsif rising_edge(clk) then
            RegWrite_out  &lt;= RegWrite_in;
            MemToReg_out  &lt;= MemToReg_in;
            ReadData_out  &lt;= ReadData_in;
            ALUResult_out &lt;= ALUResult_in;
            Rd_out   &lt;= Rd_in;
        end if;
    end process;
end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>MemToReg_out,RegWrite_out,ALUResult_out:32,ReadData_out:32,Rd_out:5</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>15</int>
        </entry>
      </elementAttributes>
      <pos x="3360" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
        <entry>
          <string>flipSelPos</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="3840" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="3720" y="80"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
      </elementAttributes>
      <pos x="3760" y="80"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="3800" y="80"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="3840" y="80"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="3880" y="80"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="3700" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>EEPROMDualPort</elementName>
      <elementAttributes>
        <entry>
          <string>AddrBits</string>
          <int>24</int>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="3100" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>addr_trunc32to24</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>addr_32:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity addr_trunc32to24 is
    Port (
        addr_32 : in  STD_LOGIC_VECTOR(31 downto 0);
        addr_24 : out STD_LOGIC_VECTOR(23 downto 0)
    );
end addr_trunc32to24;

architecture Behavioral of addr_trunc32to24 is
begin
    -- Pass lower 24 bits
    addr_24 &lt;= addr_32(23 downto 0);
end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>addr_24:24</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>9</int>
        </entry>
      </elementAttributes>
      <pos x="2740" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="2700" y="480"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>24</int>
        </entry>
      </elementAttributes>
      <pos x="2960" y="480"/>
    </visualElement>
    <visualElement>
      <elementName>Clock</elementName>
      <elementAttributes/>
      <pos x="-680" y="-40"/>
    </visualElement>
    <visualElement>
      <elementName>Button</elementName>
      <elementAttributes/>
      <pos x="-680" y="-140"/>
    </visualElement>
    <visualElement>
      <elementName>Text</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Estágio IF</string>
        </entry>
      </elementAttributes>
      <pos x="-640" y="60"/>
    </visualElement>
    <visualElement>
      <elementName>ROM</elementName>
      <elementAttributes>
        <entry>
          <string>AddrBits</string>
          <int>24</int>
        </entry>
        <entry>
          <string>Label</string>
          <string>inst memory</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
        <entry>
          <string>Data</string>
          <data>108093,fffff0ef,108093,13*0,500113,a00193,3100b3,308233</data>
        </entry>
      </elementAttributes>
      <pos x="-500" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>VDD</elementName>
      <elementAttributes/>
      <pos x="-520" y="240"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>IFID</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>pc_i:32,inst_i:32,clk,reset,freeze,bubble</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>-- Registrador que guarda os dados necessários entre IF e ID. Esses dados são o valor de PC e a instrução da vez
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity IFID is
	Port (
    	pc_i : in std_logic_vector(31 downto 0);
        inst_i: in std_logic_vector(31 downto 0);

    	clk: in std_logic;
        reset: in std_logic;

		freeze: in std_logic;
		bubble: in std_logic;

        pc_o: out std_logic_vector(31 downto 0);
        inst_o: out std_logic_vector(31 downto 0)
    	);
end IFID;

architecture Behavioral of IFID is

begin

process(clk, reset)
begin
	if reset = &apos;1&apos; then
        pc_o &lt;= X&quot;00000000&quot;;
        inst_o &lt;= X&quot;00000000&quot;;

	elsif rising_edge(clk) then

		if freeze = &apos;0&apos; then
			if bubble = &apos;1&apos; then
				pc_o &lt;= X&quot;00000000&quot;;
				inst_o &lt;= X&quot;00000000&quot;;
			else
				pc_o &lt;= pc_i;
				inst_o &lt;= inst_i;
			end if;
		end if;

	end if;
end process;

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>pc_o:32,inst_o:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>6</int>
        </entry>
      </elementAttributes>
      <pos x="-340" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Saída PC do registrador IF/ID</string>
        </entry>
        <entry>
          <string>Label</string>
          <string>pc_o</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="-140" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Saída instruction do registrador IF/ID</string>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>Label</string>
          <string>Instruction Out</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="-20" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="-380" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Description</string>
          <string>Valor atual de PC</string>
        </entry>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Label</string>
          <string>pc</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="-480" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes/>
      <pos x="-680" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="-680" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>reset</string>
        </entry>
      </elementAttributes>
      <pos x="-660" y="-140"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>reset</string>
        </entry>
      </elementAttributes>
      <pos x="-360" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>reset</string>
        </entry>
      </elementAttributes>
      <pos x="600" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>reset</string>
        </entry>
      </elementAttributes>
      <pos x="1160" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>reset</string>
        </entry>
      </elementAttributes>
      <pos x="2240" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>reset</string>
        </entry>
      </elementAttributes>
      <pos x="3340" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>clk</string>
        </entry>
      </elementAttributes>
      <pos x="3080" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>clk</string>
        </entry>
      </elementAttributes>
      <pos x="-660" y="-40"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>clk</string>
        </entry>
      </elementAttributes>
      <pos x="-360" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>clk</string>
        </entry>
      </elementAttributes>
      <pos x="600" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>clk</string>
        </entry>
      </elementAttributes>
      <pos x="1180" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>clk</string>
        </entry>
      </elementAttributes>
      <pos x="2240" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>clk</string>
        </entry>
      </elementAttributes>
      <pos x="3340" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>IFIDfreeze</string>
        </entry>
      </elementAttributes>
      <pos x="320" y="-240"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>IFIDbubble</string>
        </entry>
      </elementAttributes>
      <pos x="320" y="-220"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>IDEXbubble</string>
        </entry>
      </elementAttributes>
      <pos x="320" y="-200"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>EXMEMbubble</string>
        </entry>
      </elementAttributes>
      <pos x="320" y="-160"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>IFIDfreeze</string>
        </entry>
      </elementAttributes>
      <pos x="-360" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>IFIDbubble</string>
        </entry>
      </elementAttributes>
      <pos x="-360" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>EXMEMbubble</string>
        </entry>
      </elementAttributes>
      <pos x="2240" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>novoblocoIF.dig</elementName>
      <elementAttributes/>
      <pos x="-680" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>pc</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>pc_i:32,clk,reset,freeze</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>-- Registrador de 32 bits com entradas PCin, clk, reset e saída PCout

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity pc is
	Port (
    	pc_i : in std_logic_vector(31 downto 0);
    	clk: in std_logic;
        reset: in std_logic;

		freeze: in std_logic;

        pc_o: out std_logic_vector(31 downto 0)
    	);
end pc;

architecture Behavioral of pc is

begin

process(clk, reset)
begin
	if reset = &apos;1&apos; then
		pc_o &lt;= X&quot;00000000&quot;;

	elsif rising_edge(clk) and freeze = &apos;0&apos; then

		pc_o &lt;= pc_i;

	end if;
end process;

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>pc_o:32</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>6</int>
        </entry>
      </elementAttributes>
      <pos x="-660" y="520"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>clk</string>
        </entry>
      </elementAttributes>
      <pos x="-680" y="540"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>reset</string>
        </entry>
      </elementAttributes>
      <pos x="-680" y="580"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>PCfreeze</string>
        </entry>
      </elementAttributes>
      <pos x="320" y="-260"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>PCfreeze</string>
        </entry>
      </elementAttributes>
      <pos x="-680" y="600"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>branch-target</string>
        </entry>
      </elementAttributes>
      <pos x="-720" y="200"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>rs2_id</string>
        </entry>
      </elementAttributes>
      <pos x="420" y="740"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>rs1_id</string>
        </entry>
      </elementAttributes>
      <pos x="420" y="700"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rs2_id</string>
        </entry>
      </elementAttributes>
      <pos x="-80" y="-240"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rs1_id</string>
        </entry>
      </elementAttributes>
      <pos x="-80" y="-260"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>hdu-opcode</string>
        </entry>
      </elementAttributes>
      <pos x="360" y="160"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>hdu-opcode</string>
        </entry>
      </elementAttributes>
      <pos x="-80" y="-220"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rd_IDEX</string>
        </entry>
      </elementAttributes>
      <pos x="-80" y="-180"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>RegWrite_IDEX</string>
        </entry>
      </elementAttributes>
      <pos x="1580" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>RegWrite_IDEX</string>
        </entry>
      </elementAttributes>
      <pos x="-80" y="-140"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rd_EXMEM</string>
        </entry>
      </elementAttributes>
      <pos x="3140" y="100"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rd_EXMEM</string>
        </entry>
      </elementAttributes>
      <pos x="-80" y="-120"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
        <entry>
          <string>flipSelPos</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="1640" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>adder.dig</elementName>
      <elementAttributes/>
      <pos x="140" y="580"/>
    </visualElement>
    <visualElement>
      <elementName>BarrelShifter</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="40" y="600"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>6</int>
        </entry>
      </elementAttributes>
      <pos x="0" y="640"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>branch-target</string>
        </entry>
      </elementAttributes>
      <pos x="240" y="600"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>comparator_32bit</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>DataA:32,DataB:32</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;

-- The entity declaration for the comparator
entity comparator_32bit is
    port (
        -- Inputs: The two 32-bit data values to compare.
        -- These will come from the register file (reading rs1 and rs2).
        DataA   : in  std_logic_vector(31 downto 0);
        DataB   : in  std_logic_vector(31 downto 0);

        -- Output: A single bit indicating the result of the comparison.
        -- &apos;1&apos; if DataA is equal to DataB.
        -- &apos;0&apos; if DataA is not equal to DataB.
        AreEqual : out std_logic
    );
end entity comparator_32bit;

-- Architecture definition for the comparator
architecture behavioral of comparator_32bit is
begin

    -- This is a purely combinational process.
    -- It continuously compares the two input vectors.
    process(DataA, DataB)
    begin
        -- The comparison logic is straightforward.
        -- If the two input vectors are identical, the output is &apos;1&apos;.
        -- Otherwise, the output is &apos;0&apos;.
        -- This can be implemented efficiently by synthesizers.
        if DataA = DataB then
            AreEqual &lt;= &apos;1&apos;;
        else
            AreEqual &lt;= &apos;0&apos;;
        end if;
    end process;

    -- Alternative (and more concise) concurrent assignment statement:
    -- AreEqual &lt;= &apos;1&apos; when DataA = DataB else &apos;0&apos;;

end architecture behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>AreEqual</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>10</int>
        </entry>
      </elementAttributes>
      <pos x="40" y="740"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rs2_data-id</string>
        </entry>
      </elementAttributes>
      <pos x="960" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rs1_data-id</string>
        </entry>
      </elementAttributes>
      <pos x="980" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>jump</string>
        </entry>
      </elementAttributes>
      <pos x="900" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>pc_sel_cu</string>
        </entry>
      </elementAttributes>
      <pos x="900" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>branch_condition_unit</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>funct3:3,AreEqual,Jump_enable,Branch_enable</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;

entity branch_condition_unit is -- Renamed for broader scope (branch and jump)
    port (
        -- Inputs
        funct3      : in  std_logic_vector(2 downto 0); -- funct3 field from the instruction
        AreEqual    : in  std_logic;                    -- Result from an ALU/comparator: &apos;1&apos; if rs1 = rs2 (i.e., rs1 - rs2 = 0), &apos;0&apos; otherwise
        Jump_enable : in  std_logic;                    -- Control signal: &apos;1&apos; if the current instruction is a jump (e.g., JAL, JALR)
        Branch_enable : in  std_logic;                  -- Control signal: &apos;1&apos; if the current instruction is a branch (e.g., BEQ, BNE, BLT, BGE, etc.)

        -- Output for controlling PC update via MUX
        pc_write_enable : out std_logic                 -- &apos;1&apos; if the PC should be updated with a new target address
                                                        -- (either due to a taken branch or any jump instruction), &apos;0&apos; otherwise
    );
end entity branch_condition_unit;

architecture behavioral of branch_condition_unit is
begin

    -- Logic for determining if the PC should be updated with a new target address
    process(funct3, AreEqual, Jump_enable, Branch_enable)
    begin
        -- Default to not taking a branch/jump
        pc_write_enable &lt;= &apos;0&apos;;

        -- If it&apos;s a jump instruction, always enable PC write (JAL, JALR)
        if Jump_enable = &apos;1&apos; then
            pc_write_enable &lt;= &apos;1&apos;;
        elsif Branch_enable = &apos;1&apos; then -- Only evaluate branch conditions if it&apos;s a branch instruction
            case funct3 is
                -- BEQ: Branch if Equal (funct3 = 000)
                when &quot;000&quot; =&gt;
                    if AreEqual = &apos;1&apos; then
                        pc_write_enable &lt;= &apos;1&apos;;
                    else
                        pc_write_enable &lt;= &apos;0&apos;;
                    end if;

                -- BNE: Branch if Not Equal (funct3 = 001)
                when &quot;001&quot; =&gt;
                    if AreEqual = &apos;0&apos; then
                        pc_write_enable &lt;= &apos;1&apos;;
                    else
                        pc_write_enable &lt;= &apos;0&apos;;
                    end if;

                -- You can add other branch types here if needed (e.g., BLT, BGE, BLTU, BGEU)
                -- These would require additional inputs for ALU flags (e.g., LessThan, GreaterThan)
                -- For example:
                -- when &quot;100&quot; =&gt; -- BLT
                --    if LessThan = &apos;1&apos; then
                --        pc_write_enable &lt;= &apos;1&apos;;
                --    end if;

                when others =&gt;
                    -- For any other funct3 value when Branch_enable is &apos;1&apos; (e.g., unsupported branch type)
                    pc_write_enable &lt;= &apos;0&apos;;
            end case;
        else
            -- If neither Jump_enable nor Branch_enable is &apos;1&apos;,
            -- then it&apos;s a sequential instruction, and pc_write_enable remains &apos;0&apos; (default)
            pc_write_enable &lt;= &apos;0&apos;;
        end if;
    end process;

end architecture behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>pc_write_enable</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>10</int>
        </entry>
      </elementAttributes>
      <pos x="40" y="960"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>pc-sel-res</string>
        </entry>
      </elementAttributes>
      <pos x="320" y="1000"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>pc-sel-res</string>
        </entry>
      </elementAttributes>
      <pos x="-700" y="260"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>branch</string>
        </entry>
      </elementAttributes>
      <pos x="-40" y="1040"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>jump</string>
        </entry>
      </elementAttributes>
      <pos x="-40" y="1020"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Selector Bits</string>
          <int>2</int>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="-300" y="760"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Selector Bits</string>
          <int>2</int>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
        <entry>
          <string>flipSelPos</string>
          <boolean>true</boolean>
        </entry>
      </elementAttributes>
      <pos x="-300" y="640"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rs1_data-id</string>
        </entry>
      </elementAttributes>
      <pos x="-360" y="640"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rs2_data-id</string>
        </entry>
      </elementAttributes>
      <pos x="-360" y="760"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rs2_ex-data</string>
        </entry>
      </elementAttributes>
      <pos x="-360" y="780"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rs1_ex-data</string>
        </entry>
      </elementAttributes>
      <pos x="-360" y="660"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>forwarding_unit</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>ID_EX_rs1:5,ID_EX_rs2:5,IF_ID_rs1:5,IF_ID_rs2:5,EX_MEM_rd:5,EX_MEM_RegWrite,MEM_WB_rd:5,MEM_WB_RegWrite</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;

-- The forwarding unit entity declaration
entity forwarding_unit is
    port (
        -- Inputs from pipeline registers
        -- Source registers for the instruction currently in the EX stage (for ALU operations)
        ID_EX_rs1        : in std_logic_vector(4 downto 0);
        ID_EX_rs2        : in std_logic_vector(4 downto 0);

        -- Source registers for the instruction currently in the ID stage (for Branch Comparison)
        IF_ID_rs1        : in std_logic_vector(4 downto 0);
        IF_ID_rs2        : in std_logic_vector(4 downto 0);

        -- Destination register for the instruction in the MEM stage
        EX_MEM_rd        : in std_logic_vector(4 downto 0);
        EX_MEM_RegWrite  : in std_logic; -- Control signal: Does the instruction in MEM write to a register?

        -- Destination register for the instruction in the WB stage
        MEM_WB_rd        : in std_logic_vector(4 downto 0);
        MEM_WB_RegWrite  : in std_logic; -- Control signal: Does the instruction in WB write to a register?

        -- Outputs: Control signals for the ALU input multiplexers (EX stage)
        -- 00: No forwarding (use ID/EX register value)
        -- 01: Forward from EX/MEM stage (ALU result)
        -- 10: Forward from MEM/WB stage (Memory data or older ALU result)
        ForwardA         : out std_logic_vector(1 downto 0);
        ForwardB         : out std_logic_vector(1 downto 0);

        -- New Outputs: Control signals for the Branch Comparison input multiplexers (ID stage)
        -- 00: No forwarding (use IF/ID register value from RegFile read)
        -- 01: Forward from EX/MEM stage (ALU result)
        -- 10: Forward from MEM/WB stage (Memory data or older ALU result)
        Forward_ID_A     : out std_logic_vector(1 downto 0);
        Forward_ID_B     : out std_logic_vector(1 downto 0)
    );
end entity forwarding_unit;

-- Architecture definition for the forwarding unit
architecture behavioral of forwarding_unit is
begin

    -- This process contains the combinational logic for the forwarding unit.
    -- It continuously checks for hazard conditions.
    process(ID_EX_rs1, ID_EX_rs2, IF_ID_rs1, IF_ID_rs2,
            EX_MEM_rd, EX_MEM_RegWrite, MEM_WB_rd, MEM_WB_RegWrite)
    begin
        -- Default to no forwarding for EX stage ALU
        ForwardA &lt;= &quot;00&quot;;
        ForwardB &lt;= &quot;00&quot;;

        -- Default to no forwarding for ID stage Branch Comparison
        Forward_ID_A &lt;= &quot;00&quot;;
        Forward_ID_B &lt;= &quot;00&quot;;

        -- --- FORWARDING LOGIC FOR OPERAND A (rs1) in EX stage (ALU) ---

        -- EX/MEM Hazard Check for EX stage rs1
        if (EX_MEM_RegWrite = &apos;1&apos;) and
           (EX_MEM_rd /= &quot;00000&quot;) and
           (EX_MEM_rd = ID_EX_rs1) then
            ForwardA &lt;= &quot;01&quot;; -- Forward from EX/MEM 

        -- MEM/WB Hazard Check for EX stage rs1
        elsif (MEM_WB_RegWrite = &apos;1&apos;) and
              (MEM_WB_rd /= &quot;00000&quot;) and
              (MEM_WB_rd = ID_EX_rs1) then
            ForwardA &lt;= &quot;10&quot;; -- Forward from MEM/WB 
        end if;


        -- --- FORWARDING LOGIC FOR OPERAND B (rs2) in EX stage (ALU) ---

        -- EX/MEM Hazard Check for EX stage rs2
        if (EX_MEM_RegWrite = &apos;1&apos;) and
           (EX_MEM_rd /= &quot;00000&quot;) and
           (EX_MEM_rd = ID_EX_rs2) then
            ForwardB &lt;= &quot;01&quot;; -- Forward from EX/MEM

        -- MEM/WB Hazard Check for EX stage rs2
        elsif (MEM_WB_RegWrite = &apos;1&apos;) and
              (MEM_WB_rd /= &quot;00000&quot;) and
              (MEM_WB_rd = ID_EX_rs2) then
            ForwardB &lt;= &quot;10&quot;; -- Forward from MEM/WB
        end if;


        -- OPERAND A (rs1) in ID stage (Branch Comparison) ---
        -- This logic is for instructions whose comparison is happening in the ID stage.
        -- These forwardings prevent stalls if the branch&apos;s operands are produced by
        -- instructions recently completed or currently in EX or MEM stages.

        -- Hazard with EX/MEM stage (most recent result) for ID stage rs1
        -- This means the result is available at the end of the EX stage.
        -- For a branch in ID, this requires bypassing the ALU result back to ID.
        if (EX_MEM_RegWrite = &apos;1&apos;) and
           (EX_MEM_rd /= &quot;00000&quot;) and
           (EX_MEM_rd = IF_ID_rs1) then
            Forward_ID_A &lt;= &quot;01&quot;; -- Forward from EX/MEM pipeline register (ALU result)

        -- Hazard with MEM/WB stage for ID stage rs1
        -- This means the result is available at the end of the MEM stage.
        elsif (MEM_WB_RegWrite = &apos;1&apos;) and
              (MEM_WB_rd /= &quot;00000&quot;) and
              (MEM_WB_rd = IF_ID_rs1) then
            Forward_ID_A &lt;= &quot;10&quot;; -- Forward from MEM/WB (Memory data or older ALU result)
        end if;


        -- OPERAND B (rs2) in ID stage (Branch Comparison) ---

        -- Hazard with EX/MEM stage for ID stage rs2
        if (EX_MEM_RegWrite = &apos;1&apos;) and
           (EX_MEM_rd /= &quot;00000&quot;) and
           (EX_MEM_rd = IF_ID_rs2) then
            Forward_ID_B &lt;= &quot;01&quot;; -- Forward from EX/MEM pipeline register (ALU result)

        -- Hazard with MEM/WB stage for ID stage rs2
        elsif (MEM_WB_RegWrite = &apos;1&apos;) and
              (MEM_WB_rd /= &quot;00000&quot;) and
              (MEM_WB_rd = IF_ID_rs2) then
            Forward_ID_B &lt;= &quot;10&quot;; -- Forward from MEM/WB (Memory data or older ALU result)
        end if;

    end process;

end architecture behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>ForwardA:2,ForwardB:2,Forward_ID_A:2,Forward_ID_B:2</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>20</int>
        </entry>
      </elementAttributes>
      <pos x="2100" y="880"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>rd_data-wb</string>
        </entry>
      </elementAttributes>
      <pos x="4020" y="220"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rd_data-wb</string>
        </entry>
      </elementAttributes>
      <pos x="-360" y="680"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>fw-id-a</string>
        </entry>
      </elementAttributes>
      <pos x="-280" y="600"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>fw-id-a</string>
        </entry>
      </elementAttributes>
      <pos x="2680" y="920"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>fw-id-b</string>
        </entry>
      </elementAttributes>
      <pos x="2680" y="940"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>fw-id-b</string>
        </entry>
      </elementAttributes>
      <pos x="-280" y="880"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rs1_ex</string>
        </entry>
      </elementAttributes>
      <pos x="1760" y="880"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rs2_ex</string>
        </entry>
      </elementAttributes>
      <pos x="1760" y="900"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rd_EXMEM</string>
        </entry>
      </elementAttributes>
      <pos x="1760" y="960"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>RegWrite_EXMEM</string>
        </entry>
      </elementAttributes>
      <pos x="1760" y="980"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>RegWrite_MEMWB</string>
        </entry>
      </elementAttributes>
      <pos x="1760" y="1020"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rd_MEMWB</string>
        </entry>
      </elementAttributes>
      <pos x="1760" y="1000"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>fw-alu-a</string>
        </entry>
      </elementAttributes>
      <pos x="2680" y="880"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>fw-alu-b</string>
        </entry>
      </elementAttributes>
      <pos x="2680" y="900"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="-360" y="700"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="-360" y="820"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rs1_id</string>
        </entry>
      </elementAttributes>
      <pos x="1760" y="920"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rs2_id</string>
        </entry>
      </elementAttributes>
      <pos x="1760" y="940"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rd_IDEX</string>
        </entry>
      </elementAttributes>
      <pos x="2240" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>RegWrite_MEMWB</string>
        </entry>
      </elementAttributes>
      <pos x="600" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rd_MEMWB</string>
        </entry>
      </elementAttributes>
      <pos x="600" y="480"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rd_data-wb</string>
        </entry>
      </elementAttributes>
      <pos x="600" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rd_data-wb</string>
        </entry>
      </elementAttributes>
      <pos x="-360" y="800"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rs1_id</string>
        </entry>
      </elementAttributes>
      <pos x="600" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rs2_id</string>
        </entry>
      </elementAttributes>
      <pos x="600" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rs1_ex-data</string>
        </entry>
      </elementAttributes>
      <pos x="1680" y="480"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>rs2_ex-data</string>
        </entry>
      </elementAttributes>
      <pos x="1760" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>ALUControl</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>ALUOp:2,funct3:3,funct7_5,size:2</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity ALUControl is
    port (
        ALUOp  : in  std_logic_vector(1 downto 0);
        funct3 : in  std_logic_vector(2 downto 0);
        funct7_5: in std_logic;  -- bit 30 da instrução (funct7[5])
	size : in std_logic_vector(1 downto 0); -- controle externo para operações vetoriais
        ALUCtrl : out std_logic_vector(4 downto 0)
    );
end entity;

architecture Behavioral of ALUControl is
begin
    process(ALUOp, funct3, funct7_5, size)
    begin
        case ALUOp is
            when &quot;00&quot; =&gt;  -- Loads, Stores, AUIPC (ADD)
		case size is
			when &quot;00&quot; =&gt; 
				ALUCtrl &lt;= &quot;01000&quot;;  -- 04
			when &quot;01&quot; =&gt;
				ALUCtrl &lt;= &quot;01001&quot;;  -- 08
			when &quot;10&quot; =&gt;
				ALUCtrl &lt;= &quot;01010&quot;;  -- 16
			when &quot;11&quot; =&gt;
				ALUCtrl &lt;= &quot;00010&quot;;  -- 32
			when others =&gt;
               			ALUCtrl &lt;= &quot;11111&quot;;	
		end case;

            when &quot;01&quot; =&gt;  -- Branches (SUB)
		case size is
			when &quot;00&quot; =&gt; 
				ALUCtrl &lt;= &quot;01100&quot;;  -- 04
			when &quot;01&quot; =&gt;
				ALUCtrl &lt;= &quot;01101&quot;;  -- 08
			when &quot;10&quot; =&gt;
				ALUCtrl &lt;= &quot;01110&quot;;  -- 16
			when &quot;11&quot; =&gt;
				ALUCtrl &lt;= &quot;00110&quot;;  -- 32
			when others =&gt;
               			ALUCtrl &lt;= &quot;11111&quot;;	
		end case;

            when &quot;10&quot; =&gt;  -- R-Type instructions
                case funct3 is
                    when &quot;000&quot; =&gt;  -- ADD or SUB
                        if funct7_5 = &apos;0&apos; then
				case size is
					when &quot;00&quot; =&gt; 
						ALUCtrl &lt;= &quot;01000&quot;;  -- 04
					when &quot;01&quot; =&gt;
						ALUCtrl &lt;= &quot;01001&quot;;  -- 08
					when &quot;10&quot; =&gt;
						ALUCtrl &lt;= &quot;01010&quot;;  -- 16
					when &quot;11&quot; =&gt;
						ALUCtrl &lt;= &quot;00010&quot;;  -- 32
					when others =&gt;
               					ALUCtrl &lt;= &quot;11111&quot;;	
				end case;

                        else
                            case size is
				when &quot;00&quot; =&gt; 
					ALUCtrl &lt;= &quot;01100&quot;;  -- 04
				when &quot;01&quot; =&gt;
					ALUCtrl &lt;= &quot;01101&quot;;  -- 08
				when &quot;10&quot; =&gt;
					ALUCtrl &lt;= &quot;01110&quot;;  -- 16
				when &quot;11&quot; =&gt;
					ALUCtrl &lt;= &quot;00110&quot;;  -- 32
				when others =&gt;
               				ALUCtrl &lt;= &quot;11111&quot;;	
			end case;
                        end if;
                    when &quot;111&quot; =&gt; ALUCtrl &lt;= &quot;00000&quot;; -- AND
                    when &quot;110&quot; =&gt; ALUCtrl &lt;= &quot;00001&quot;; -- OR
                    when &quot;100&quot; =&gt; ALUCtrl &lt;= &quot;00011&quot;; -- XOR
                    when &quot;001&quot; =&gt; -- SLL
			case size is
				when &quot;00&quot; =&gt; 
					ALUCtrl &lt;= &quot;10000&quot;;  -- 04
				when &quot;01&quot; =&gt;
					ALUCtrl &lt;= &quot;10001&quot;;  -- 08
				when &quot;10&quot; =&gt;
					ALUCtrl &lt;= &quot;10010&quot;;  -- 16
				when &quot;11&quot; =&gt;
					ALUCtrl &lt;= &quot;00100&quot;;  -- 32
				when others =&gt;
               				ALUCtrl &lt;= &quot;11111&quot;;	
			end case;

                    when &quot;101&quot; =&gt; -- SRL
			case size is
				when &quot;00&quot; =&gt; 
					ALUCtrl &lt;= &quot;11000&quot;;  -- 04
				when &quot;01&quot; =&gt;
					ALUCtrl &lt;= &quot;11001&quot;;  -- 08
				when &quot;10&quot; =&gt;
					ALUCtrl &lt;= &quot;11010&quot;;  -- 16
				when &quot;11&quot; =&gt;
					ALUCtrl &lt;= &quot;00101&quot;;  -- 32
				when others =&gt;
               				ALUCtrl &lt;= &quot;11111&quot;;	
			end case;

                    when others =&gt;
                        ALUCtrl &lt;= &quot;11111&quot;; -- Default / não definido
                end case;

            when &quot;11&quot; =&gt;  -- I-Type aritméticas e shifts imediatas
                case funct3 is
                    when &quot;000&quot; =&gt; 
			case size is
				when &quot;00&quot; =&gt; 
					ALUCtrl &lt;= &quot;01000&quot;;  -- 04
				when &quot;01&quot; =&gt;
					ALUCtrl &lt;= &quot;01001&quot;;  -- 08
				when &quot;10&quot; =&gt;
					ALUCtrl &lt;= &quot;01010&quot;;  -- 16
				when &quot;11&quot; =&gt;
					ALUCtrl &lt;= &quot;00010&quot;;  -- 32
				when others =&gt;
               				ALUCtrl &lt;= &quot;11111&quot;;	
			end case;

                    when &quot;111&quot; =&gt; ALUCtrl &lt;= &quot;00000&quot;; -- ANDI
                    when &quot;110&quot; =&gt; ALUCtrl &lt;= &quot;00001&quot;; -- ORI
                    when &quot;100&quot; =&gt; ALUCtrl &lt;= &quot;00011&quot;; -- XORI
                    when &quot;001&quot; =&gt; -- SLLI
			case size is
				when &quot;00&quot; =&gt; 
					ALUCtrl &lt;= &quot;10000&quot;;  -- 04
				when &quot;01&quot; =&gt;
					ALUCtrl &lt;= &quot;10001&quot;;  -- 08
				when &quot;10&quot; =&gt;
					ALUCtrl &lt;= &quot;10010&quot;;  -- 16
				when &quot;11&quot; =&gt;
					ALUCtrl &lt;= &quot;00100&quot;;  -- 32
				when others =&gt;
               				 ALUCtrl &lt;= &quot;11111&quot;;	
			end case;

                    when &quot;101&quot; =&gt; -- SRLI
			case size is
				when &quot;00&quot; =&gt; 
					ALUCtrl &lt;= &quot;11000&quot;;  -- 04
				when &quot;01&quot; =&gt;
					ALUCtrl &lt;= &quot;11001&quot;;  -- 08
				when &quot;10&quot; =&gt;
					ALUCtrl &lt;= &quot;11010&quot;;  -- 16
				when &quot;11&quot; =&gt;
					ALUCtrl &lt;= &quot;00101&quot;;  -- 32
				when others =&gt;
               				 ALUCtrl &lt;= &quot;11111&quot;;		
			end case;

                    when others =&gt;
                        ALUCtrl &lt;= &quot;11111&quot;; -- Default / não definido
                end case;

            when others =&gt;
                ALUCtrl &lt;= &quot;11111&quot;; -- Default / não definido
        end case;
    end process;
end architecture;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>ALUCtrl:5</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>8</int>
        </entry>
      </elementAttributes>
      <pos x="1740" y="720"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Selector Bits</string>
          <int>2</int>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="1840" y="480"/>
    </visualElement>
    <visualElement>
      <elementName>Multiplexer</elementName>
      <elementAttributes>
        <entry>
          <string>Selector Bits</string>
          <int>2</int>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="1780" y="560"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>fw-alu-a</string>
        </entry>
      </elementAttributes>
      <pos x="1980" y="580"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>fw-alu-b</string>
        </entry>
      </elementAttributes>
      <pos x="1980" y="660"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="1820" y="540"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
        <entry>
          <string>Bits</string>
          <int>32</int>
        </entry>
      </elementAttributes>
      <pos x="1760" y="620"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rd_data-wb</string>
        </entry>
      </elementAttributes>
      <pos x="1680" y="600"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="2540" y="1060"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="2580" y="1100"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="2620" y="1140"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="2660" y="1180"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="1800" y="1360"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="1840" y="1320"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="1880" y="1280"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="1920" y="1240"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="1960" y="1200"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
      </elementAttributes>
      <pos x="2000" y="1160"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>Bits</string>
          <int>5</int>
        </entry>
      </elementAttributes>
      <pos x="2040" y="1120"/>
    </visualElement>
    <visualElement>
      <elementName>Out</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
      </elementAttributes>
      <pos x="2080" y="1080"/>
    </visualElement>
    <visualElement>
      <elementName>Const</elementName>
      <elementAttributes>
        <entry>
          <string>Value</string>
          <long>0</long>
        </entry>
      </elementAttributes>
      <pos x="280" y="-160"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>rd_IDEX</string>
        </entry>
      </elementAttributes>
      <pos x="1520" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>rs1_ex</string>
        </entry>
      </elementAttributes>
      <pos x="1520" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>rs2_ex</string>
        </entry>
      </elementAttributes>
      <pos x="1520" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>rs1_ex-data</string>
        </entry>
      </elementAttributes>
      <pos x="1520" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>rs2_ex-data</string>
        </entry>
      </elementAttributes>
      <pos x="1520" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>IDEXbubble</string>
        </entry>
      </elementAttributes>
      <pos x="1160" y="640"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>branch</string>
        </entry>
      </elementAttributes>
      <pos x="1120" y="20"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>jump</string>
        </entry>
      </elementAttributes>
      <pos x="900" y="0"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>HDU</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>rs1:5,rs2:5,opcode:7,jump,rd_IDEX:5,memRead_IDEX,regWrite_IDEX,rd_EXMEM:5,memRead_EXMEM</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity HDU is
	Port (
        -- Entradas que vêm do estágio ID
        rs1: in std_logic_vector(4 downto 0);
        rs2: in std_logic_vector(4 downto 0);
        opcode: in std_logic_vector(6 downto 0);

        jump: in std_logic; -- Indica se será feito um salto este ciclo

        -- Entradas que vêm dos demais estágios
        rd_IDEX: in std_logic_vector(4 downto 0);
        memRead_IDEX: in std_logic;
        regWrite_IDEX: in std_logic;

        rd_EXMEM: in std_logic_vector(4 downto 0);
        memRead_EXMEM: in std_logic;

    	-- Saídas
        -- Saídas freeze
        -- Se uma delas é &apos;1&apos;, o registrador em questão mantém seu valor atual no próximo ciclo
        PC_freeze: out std_logic;
        IFID_freeze: out std_logic;

        -- Saídas bubble
        -- Se uma delas é &apos;1&apos;, o registrador em questão recebe um NOP no próximo ciclo. Seu valor atual pode continuar se propagando ao longo da pipeline (pois o NOP é inserido de forma síncrona)
        IFID_bubble: out std_logic;
        IDEX_bubble: out std_logic
    	);
end HDU;

architecture Behavioral of HDU is

    -- Opcodes para diferentes tipos de instrução
    constant R_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;0110011&quot;; -- OP (ADD, SUB, AND, OR, XOR)
    constant I_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;0010011&quot;; -- OP-IMM (ADDI, ANDI, ORI)
    constant L_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;0000011&quot;; -- LOAD (LW)
    constant S_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;0100011&quot;; -- STORE (SW)
    constant B_TYPE_OP   : std_logic_vector(6 downto 0) := &quot;1100011&quot;; -- BRANCH (BEQ, BNE)
    constant JAL_OP      : std_logic_vector(6 downto 0) := &quot;1101111&quot;; -- JAL
    constant JALR_OP     : std_logic_vector(6 downto 0) := &quot;1100111&quot;; -- JALR
    constant LUI_OP      : std_logic_vector(6 downto 0) := &quot;0110111&quot;; -- LUI
    constant AUIPC_OP    : std_logic_vector(6 downto 0) := &quot;0010111&quot;; -- AUIPC

begin

process(rs1, rs2, opcode, rd_IDEX, memRead_IDEX, jump)

    variable inst_type: integer;

    -- Temos dois tipos de hazard: DataHazard e ControlHazard
    -- DataHazard ocorre em três situações: load-use, write-jump e load-jump
    -- ControlHazard ocorre em jump

    -- inst_type = 1 indica que a instrução é jal, auipc, lui, ou seja, não está sujeita a DataHazard

    -- inst_type = 2 indica que a instrução é addi, andi, ori, xori, lli, srli, lw, sw, ou seja, está sujeita a DataHazard (load-use) apenas em rs1

    -- inst_type = 3 indica que a instrução é add, sub, and, or, xor, sll, srl, ou seja, está sujeita a DataHazard (load-use) em rs1 e rs2

    -- inst_type = 4 indica que a instrução é jalr, ou seja, está sujeita a DataHazard (load-branch ou write-branch) apenas em rs1

    -- inst_type = 5 indica que a instrução é beq, bne, ou seja, está sujeita a DataHazard (load-branch ou write-branch) em rs1 e rs2

    variable DataHazard: std_logic; -- Indica que há um DataHazard

begin
    -- Identificar se a instução em ID é tipo 1, 2, ou 3
    case opcode is
        when JAL_OP | LUI_OP | AUIPC_OP =&gt;
            inst_type := 1;
        when I_TYPE_OP | L_TYPE_OP | S_TYPE_OP =&gt;
            inst_type := 2;
        when R_TYPE_OP =&gt;
            inst_type := 3;
        when JALR_OP =&gt;
            inst_type := 4;
        when B_TYPE_OP =&gt;
            inst_type := 5;
        when others =&gt;
            -- No caso de instrução inválida, vou considerar como tipo 1 (não suscetível a hazard de escrita-leitura)
            inst_type := 1;
    end case;

    -- Identificar com base nisso se há DataHazard
    case inst_type is            
        when 2 =&gt;
            if memRead_IDEX = &apos;1&apos; and rd_IDEX = rs1 then
                DataHazard := &apos;1&apos;; -- load-use
            else
                DataHazard := &apos;0&apos;;
            end if;

        when 3 =&gt;
            if memRead_IDEX = &apos;1&apos; and (rd_IDEX = rs1 or rd_IDEX = rs2) then
                DataHazard := &apos;1&apos;; -- load-use
            else
                DataHazard := &apos;0&apos;;
            end if;

        when 4 =&gt;
            if regWrite_IDEX = &apos;1&apos; and rd_IDEX = rs1 then
                DataHazard := &apos;1&apos;; -- write-jump

            elsif memRead_IDEX = &apos;1&apos; and rd_IDEX = rs1 then
                DataHazard := &apos;1&apos;; -- load-jump em IDEX
            
            elsif memRead_EXMEM = &apos;1&apos; and rd_EXMEM = rs1 then
                DataHazard := &apos;1&apos;; -- load-jump em EXMEM
            
            else
                DataHazard := &apos;0&apos;;

            end if;

        when 5 =&gt;
            if regWrite_IDEX = &apos;1&apos; and (rd_IDEX = rs1 or rd_IDEX = rs2) then
                DataHazard := &apos;1&apos;; -- write-jump

            elsif memRead_IDEX = &apos;1&apos; and (rd_IDEX = rs1 or rd_IDEX = rs2) then
                DataHazard := &apos;1&apos;; -- load-jump em IDEX

            elsif memRead_EXMEM = &apos;1&apos; and (rd_EXMEM = rs1 or rd_EXMEM = rs2) then
                DataHazard := &apos;1&apos;; -- load-jump em EXMEM
            
            else
                DataHazard := &apos;0&apos;;

            end if;

        when others =&gt;
            -- No tipo 1, não temos DataHazard
            DataHazard := &apos;0&apos;;
    end case;

    -- De acordo com DataHazard e jump, determinar as saídas
    if DataHazard = &apos;1&apos; then
        PC_freeze &lt;= &apos;1&apos;;
        IFID_freeze &lt;= &apos;1&apos;;
        IFID_bubble &lt;= &apos;0&apos;;
        IDEX_bubble &lt;= &apos;1&apos;;
    elsif jump = &apos;1&apos; then
        PC_freeze &lt;= &apos;0&apos;;
        IFID_freeze &lt;= &apos;0&apos;;
        IFID_bubble &lt;= &apos;1&apos;;
        IDEX_bubble &lt;= &apos;0&apos;;
    else
        PC_freeze &lt;= &apos;0&apos;;
        IFID_freeze &lt;= &apos;0&apos;;
        IFID_bubble &lt;= &apos;0&apos;;
        IDEX_bubble &lt;= &apos;0&apos;;
    end if;
end process;

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>PC_freeze,IFID_freeze,IFID_bubble,IDEX_bubble</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>12</int>
        </entry>
      </elementAttributes>
      <pos x="20" y="-260"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>pc-sel-res</string>
        </entry>
      </elementAttributes>
      <pos x="-80" y="-200"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>NetName</string>
          <string>MemToReg_IDEX</string>
        </entry>
      </elementAttributes>
      <pos x="1580" y="80"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>MemToReg_IDEX</string>
        </entry>
      </elementAttributes>
      <pos x="-80" y="-160"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>RegWrite_EXMEM</string>
        </entry>
      </elementAttributes>
      <pos x="3180" y="100"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>RegWrite_MEMWB</string>
        </entry>
      </elementAttributes>
      <pos x="3680" y="60"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="3"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>rd_MEMWB</string>
        </entry>
      </elementAttributes>
      <pos x="3680" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="2"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>MemToReg_EXMEM</string>
        </entry>
      </elementAttributes>
      <pos x="-80" y="-100"/>
    </visualElement>
    <visualElement>
      <elementName>Tunnel</elementName>
      <elementAttributes>
        <entry>
          <string>rotation</string>
          <rotation rotation="1"/>
        </entry>
        <entry>
          <string>NetName</string>
          <string>MemToReg_EXMEM</string>
        </entry>
      </elementAttributes>
      <pos x="2700" y="120"/>
    </visualElement>
    <visualElement>
      <elementName>Alu_com_somador_vetorial.dig</elementName>
      <elementAttributes/>
      <pos x="1960" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Bits</string>
          <int>2</int>
        </entry>
      </elementAttributes>
      <pos x="1660" y="840"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="-20" y="360"/>
      <p2 x="-100" y="400"/>
    </wire>
    <wire>
      <p1 x="-760" y="640"/>
      <p2 x="-520" y="640"/>
    </wire>
    <wire>
      <p1 x="480" y="640"/>
      <p2 x="1140" y="640"/>
    </wire>
    <wire>
      <p1 x="0" y="640"/>
      <p2 x="40" y="640"/>
    </wire>
    <wire>
      <p1 x="-360" y="640"/>
      <p2 x="-300" y="640"/>
    </wire>
    <wire>
      <p1 x="880" y="0"/>
      <p2 x="900" y="0"/>
    </wire>
    <wire>
      <p1 x="-80" y="-260"/>
      <p2 x="20" y="-260"/>
    </wire>
    <wire>
      <p1 x="260" y="-260"/>
      <p2 x="320" y="-260"/>
    </wire>
    <wire>
      <p1 x="3000" y="260"/>
      <p2 x="3360" y="260"/>
    </wire>
    <wire>
      <p1 x="2660" y="260"/>
      <p2 x="2980" y="260"/>
    </wire>
    <wire>
      <p1 x="1500" y="260"/>
      <p2 x="1540" y="260"/>
    </wire>
    <wire>
      <p1 x="880" y="260"/>
      <p2 x="1000" y="260"/>
    </wire>
    <wire>
      <p1 x="1080" y="260"/>
      <p2 x="1200" y="260"/>
    </wire>
    <wire>
      <p1 x="1000" y="260"/>
      <p2 x="1040" y="260"/>
    </wire>
    <wire>
      <p1 x="1540" y="260"/>
      <p2 x="2260" y="260"/>
    </wire>
    <wire>
      <p1 x="-20" y="900"/>
      <p2 x="460" y="900"/>
    </wire>
    <wire>
      <p1 x="2500" y="900"/>
      <p2 x="2580" y="900"/>
    </wire>
    <wire>
      <p1 x="1760" y="900"/>
      <p2 x="1840" y="900"/>
    </wire>
    <wire>
      <p1 x="1840" y="900"/>
      <p2 x="2100" y="900"/>
    </wire>
    <wire>
      <p1 x="2580" y="900"/>
      <p2 x="2680" y="900"/>
    </wire>
    <wire>
      <p1 x="3060" y="520"/>
      <p2 x="3100" y="520"/>
    </wire>
    <wire>
      <p1 x="-680" y="520"/>
      <p2 x="-660" y="520"/>
    </wire>
    <wire>
      <p1 x="1880" y="520"/>
      <p2 x="1900" y="520"/>
    </wire>
    <wire>
      <p1 x="1760" y="520"/>
      <p2 x="1840" y="520"/>
    </wire>
    <wire>
      <p1 x="-680" y="-140"/>
      <p2 x="-660" y="-140"/>
    </wire>
    <wire>
      <p1 x="-80" y="-140"/>
      <p2 x="20" y="-140"/>
    </wire>
    <wire>
      <p1 x="600" y="140"/>
      <p2 x="900" y="140"/>
    </wire>
    <wire>
      <p1 x="-360" y="780"/>
      <p2 x="-300" y="780"/>
    </wire>
    <wire>
      <p1 x="-180" y="780"/>
      <p2 x="40" y="780"/>
    </wire>
    <wire>
      <p1 x="1520" y="780"/>
      <p2 x="1740" y="780"/>
    </wire>
    <wire>
      <p1 x="340" y="400"/>
      <p2 x="360" y="400"/>
    </wire>
    <wire>
      <p1 x="920" y="400"/>
      <p2 x="960" y="400"/>
    </wire>
    <wire>
      <p1 x="-180" y="400"/>
      <p2 x="-100" y="400"/>
    </wire>
    <wire>
      <p1 x="600" y="400"/>
      <p2 x="620" y="400"/>
    </wire>
    <wire>
      <p1 x="-360" y="400"/>
      <p2 x="-340" y="400"/>
    </wire>
    <wire>
      <p1 x="-760" y="400"/>
      <p2 x="-680" y="400"/>
    </wire>
    <wire>
      <p1 x="1080" y="400"/>
      <p2 x="1200" y="400"/>
    </wire>
    <wire>
      <p1 x="1500" y="400"/>
      <p2 x="1560" y="400"/>
    </wire>
    <wire>
      <p1 x="-100" y="400"/>
      <p2 x="40" y="400"/>
    </wire>
    <wire>
      <p1 x="-40" y="1040"/>
      <p2 x="40" y="1040"/>
    </wire>
    <wire>
      <p1 x="420" y="660"/>
      <p2 x="460" y="660"/>
    </wire>
    <wire>
      <p1 x="-360" y="660"/>
      <p2 x="-300" y="660"/>
    </wire>
    <wire>
      <p1 x="1800" y="660"/>
      <p2 x="1980" y="660"/>
    </wire>
    <wire>
      <p1 x="840" y="20"/>
      <p2 x="1020" y="20"/>
    </wire>
    <wire>
      <p1 x="1020" y="20"/>
      <p2 x="1120" y="20"/>
    </wire>
    <wire>
      <p1 x="2660" y="280"/>
      <p2 x="3140" y="280"/>
    </wire>
    <wire>
      <p1 x="2040" y="280"/>
      <p2 x="2260" y="280"/>
    </wire>
    <wire>
      <p1 x="1500" y="280"/>
      <p2 x="1520" y="280"/>
    </wire>
    <wire>
      <p1 x="880" y="280"/>
      <p2 x="1020" y="280"/>
    </wire>
    <wire>
      <p1 x="1060" y="280"/>
      <p2 x="1200" y="280"/>
    </wire>
    <wire>
      <p1 x="3140" y="280"/>
      <p2 x="3360" y="280"/>
    </wire>
    <wire>
      <p1 x="2500" y="920"/>
      <p2 x="2620" y="920"/>
    </wire>
    <wire>
      <p1 x="1760" y="920"/>
      <p2 x="1880" y="920"/>
    </wire>
    <wire>
      <p1 x="2620" y="920"/>
      <p2 x="2680" y="920"/>
    </wire>
    <wire>
      <p1 x="1880" y="920"/>
      <p2 x="2100" y="920"/>
    </wire>
    <wire>
      <p1 x="-680" y="540"/>
      <p2 x="-660" y="540"/>
    </wire>
    <wire>
      <p1 x="1820" y="540"/>
      <p2 x="1840" y="540"/>
    </wire>
    <wire>
      <p1 x="-80" y="-160"/>
      <p2 x="20" y="-160"/>
    </wire>
    <wire>
      <p1 x="280" y="-160"/>
      <p2 x="320" y="-160"/>
    </wire>
    <wire>
      <p1 x="360" y="160"/>
      <p2 x="500" y="160"/>
    </wire>
    <wire>
      <p1 x="3660" y="160"/>
      <p2 x="3760" y="160"/>
    </wire>
    <wire>
      <p1 x="2660" y="160"/>
      <p2 x="3060" y="160"/>
    </wire>
    <wire>
      <p1 x="-540" y="160"/>
      <p2 x="-500" y="160"/>
    </wire>
    <wire>
      <p1 x="2240" y="160"/>
      <p2 x="2260" y="160"/>
    </wire>
    <wire>
      <p1 x="3340" y="160"/>
      <p2 x="3360" y="160"/>
    </wire>
    <wire>
      <p1 x="1500" y="160"/>
      <p2 x="1700" y="160"/>
    </wire>
    <wire>
      <p1 x="880" y="160"/>
      <p2 x="900" y="160"/>
    </wire>
    <wire>
      <p1 x="1180" y="160"/>
      <p2 x="1200" y="160"/>
    </wire>
    <wire>
      <p1 x="500" y="160"/>
      <p2 x="580" y="160"/>
    </wire>
    <wire>
      <p1 x="900" y="160"/>
      <p2 x="1140" y="160"/>
    </wire>
    <wire>
      <p1 x="3760" y="160"/>
      <p2 x="3860" y="160"/>
    </wire>
    <wire>
      <p1 x="-260" y="800"/>
      <p2 x="-180" y="800"/>
    </wire>
    <wire>
      <p1 x="-360" y="800"/>
      <p2 x="-300" y="800"/>
    </wire>
    <wire>
      <p1 x="340" y="420"/>
      <p2 x="400" y="420"/>
    </wire>
    <wire>
      <p1 x="600" y="420"/>
      <p2 x="620" y="420"/>
    </wire>
    <wire>
      <p1 x="1900" y="420"/>
      <p2 x="1960" y="420"/>
    </wire>
    <wire>
      <p1 x="1100" y="420"/>
      <p2 x="1200" y="420"/>
    </wire>
    <wire>
      <p1 x="1500" y="420"/>
      <p2 x="1520" y="420"/>
    </wire>
    <wire>
      <p1 x="2020" y="420"/>
      <p2 x="2040" y="420"/>
    </wire>
    <wire>
      <p1 x="-680" y="-40"/>
      <p2 x="-660" y="-40"/>
    </wire>
    <wire>
      <p1 x="-100" y="680"/>
      <p2 x="580" y="680"/>
    </wire>
    <wire>
      <p1 x="880" y="680"/>
      <p2 x="920" y="680"/>
    </wire>
    <wire>
      <p1 x="-260" y="680"/>
      <p2 x="-180" y="680"/>
    </wire>
    <wire>
      <p1 x="-360" y="680"/>
      <p2 x="-300" y="680"/>
    </wire>
    <wire>
      <p1 x="1720" y="680"/>
      <p2 x="2720" y="680"/>
    </wire>
    <wire>
      <p1 x="920" y="680"/>
      <p2 x="1040" y="680"/>
    </wire>
    <wire>
      <p1 x="800" y="40"/>
      <p2 x="1000" y="40"/>
    </wire>
    <wire>
      <p1 x="-220" y="300"/>
      <p2 x="-160" y="300"/>
    </wire>
    <wire>
      <p1 x="-520" y="300"/>
      <p2 x="-340" y="300"/>
    </wire>
    <wire>
      <p1 x="3680" y="300"/>
      <p2 x="3700" y="300"/>
    </wire>
    <wire>
      <p1 x="1500" y="300"/>
      <p2 x="1520" y="300"/>
    </wire>
    <wire>
      <p1 x="1640" y="300"/>
      <p2 x="2260" y="300"/>
    </wire>
    <wire>
      <p1 x="880" y="300"/>
      <p2 x="900" y="300"/>
    </wire>
    <wire>
      <p1 x="1040" y="300"/>
      <p2 x="1200" y="300"/>
    </wire>
    <wire>
      <p1 x="-160" y="300"/>
      <p2 x="-140" y="300"/>
    </wire>
    <wire>
      <p1 x="2500" y="940"/>
      <p2 x="2660" y="940"/>
    </wire>
    <wire>
      <p1 x="1760" y="940"/>
      <p2 x="1920" y="940"/>
    </wire>
    <wire>
      <p1 x="1920" y="940"/>
      <p2 x="2100" y="940"/>
    </wire>
    <wire>
      <p1 x="2660" y="940"/>
      <p2 x="2680" y="940"/>
    </wire>
    <wire>
      <p1 x="360" y="560"/>
      <p2 x="1060" y="560"/>
    </wire>
    <wire>
      <p1 x="-540" y="560"/>
      <p2 x="-520" y="560"/>
    </wire>
    <wire>
      <p1 x="-80" y="-180"/>
      <p2 x="20" y="-180"/>
    </wire>
    <wire>
      <p1 x="3660" y="180"/>
      <p2 x="3680" y="180"/>
    </wire>
    <wire>
      <p1 x="2660" y="180"/>
      <p2 x="3040" y="180"/>
    </wire>
    <wire>
      <p1 x="-440" y="180"/>
      <p2 x="-420" y="180"/>
    </wire>
    <wire>
      <p1 x="2240" y="180"/>
      <p2 x="2260" y="180"/>
    </wire>
    <wire>
      <p1 x="3340" y="180"/>
      <p2 x="3360" y="180"/>
    </wire>
    <wire>
      <p1 x="1500" y="180"/>
      <p2 x="1660" y="180"/>
    </wire>
    <wire>
      <p1 x="880" y="180"/>
      <p2 x="920" y="180"/>
    </wire>
    <wire>
      <p1 x="1160" y="180"/>
      <p2 x="1200" y="180"/>
    </wire>
    <wire>
      <p1 x="920" y="180"/>
      <p2 x="1120" y="180"/>
    </wire>
    <wire>
      <p1 x="-360" y="820"/>
      <p2 x="-300" y="820"/>
    </wire>
    <wire>
      <p1 x="2680" y="440"/>
      <p2 x="2700" y="440"/>
    </wire>
    <wire>
      <p1 x="2920" y="440"/>
      <p2 x="2960" y="440"/>
    </wire>
    <wire>
      <p1 x="-520" y="440"/>
      <p2 x="-480" y="440"/>
    </wire>
    <wire>
      <p1 x="340" y="440"/>
      <p2 x="420" y="440"/>
    </wire>
    <wire>
      <p1 x="600" y="440"/>
      <p2 x="620" y="440"/>
    </wire>
    <wire>
      <p1 x="1920" y="440"/>
      <p2 x="1960" y="440"/>
    </wire>
    <wire>
      <p1 x="1680" y="440"/>
      <p2 x="1780" y="440"/>
    </wire>
    <wire>
      <p1 x="1120" y="440"/>
      <p2 x="1200" y="440"/>
    </wire>
    <wire>
      <p1 x="2960" y="440"/>
      <p2 x="3100" y="440"/>
    </wire>
    <wire>
      <p1 x="2700" y="440"/>
      <p2 x="2740" y="440"/>
    </wire>
    <wire>
      <p1 x="360" y="700"/>
      <p2 x="420" y="700"/>
    </wire>
    <wire>
      <p1 x="-360" y="700"/>
      <p2 x="-300" y="700"/>
    </wire>
    <wire>
      <p1 x="760" y="60"/>
      <p2 x="980" y="60"/>
    </wire>
    <wire>
      <p1 x="-220" y="320"/>
      <p2 x="-180" y="320"/>
    </wire>
    <wire>
      <p1 x="-420" y="320"/>
      <p2 x="-340" y="320"/>
    </wire>
    <wire>
      <p1 x="-700" y="320"/>
      <p2 x="-680" y="320"/>
    </wire>
    <wire>
      <p1 x="880" y="320"/>
      <p2 x="900" y="320"/>
    </wire>
    <wire>
      <p1 x="2240" y="320"/>
      <p2 x="2260" y="320"/>
    </wire>
    <wire>
      <p1 x="1500" y="320"/>
      <p2 x="1600" y="320"/>
    </wire>
    <wire>
      <p1 x="980" y="320"/>
      <p2 x="1200" y="320"/>
    </wire>
    <wire>
      <p1 x="-20" y="960"/>
      <p2 x="40" y="960"/>
    </wire>
    <wire>
      <p1 x="1760" y="960"/>
      <p2 x="1960" y="960"/>
    </wire>
    <wire>
      <p1 x="1960" y="960"/>
      <p2 x="2100" y="960"/>
    </wire>
    <wire>
      <p1 x="1860" y="580"/>
      <p2 x="1980" y="580"/>
    </wire>
    <wire>
      <p1 x="380" y="580"/>
      <p2 x="1080" y="580"/>
    </wire>
    <wire>
      <p1 x="-680" y="580"/>
      <p2 x="-660" y="580"/>
    </wire>
    <wire>
      <p1 x="-160" y="580"/>
      <p2 x="140" y="580"/>
    </wire>
    <wire>
      <p1 x="1720" y="580"/>
      <p2 x="1780" y="580"/>
    </wire>
    <wire>
      <p1 x="-80" y="-200"/>
      <p2 x="20" y="-200"/>
    </wire>
    <wire>
      <p1 x="260" y="-200"/>
      <p2 x="320" y="-200"/>
    </wire>
    <wire>
      <p1 x="2660" y="200"/>
      <p2 x="2700" y="200"/>
    </wire>
    <wire>
      <p1 x="3660" y="200"/>
      <p2 x="3800" y="200"/>
    </wire>
    <wire>
      <p1 x="1500" y="200"/>
      <p2 x="2260" y="200"/>
    </wire>
    <wire>
      <p1 x="-520" y="200"/>
      <p2 x="-500" y="200"/>
    </wire>
    <wire>
      <p1 x="-420" y="200"/>
      <p2 x="-380" y="200"/>
    </wire>
    <wire>
      <p1 x="-720" y="200"/>
      <p2 x="-680" y="200"/>
    </wire>
    <wire>
      <p1 x="1140" y="200"/>
      <p2 x="1200" y="200"/>
    </wire>
    <wire>
      <p1 x="880" y="200"/>
      <p2 x="940" y="200"/>
    </wire>
    <wire>
      <p1 x="940" y="200"/>
      <p2 x="1100" y="200"/>
    </wire>
    <wire>
      <p1 x="3800" y="200"/>
      <p2 x="3840" y="200"/>
    </wire>
    <wire>
      <p1 x="2700" y="200"/>
      <p2 x="3360" y="200"/>
    </wire>
    <wire>
      <p1 x="-40" y="840"/>
      <p2 x="1040" y="840"/>
    </wire>
    <wire>
      <p1 x="1660" y="840"/>
      <p2 x="1740" y="840"/>
    </wire>
    <wire>
      <p1 x="1940" y="460"/>
      <p2 x="1960" y="460"/>
    </wire>
    <wire>
      <p1 x="2980" y="460"/>
      <p2 x="3100" y="460"/>
    </wire>
    <wire>
      <p1 x="-680" y="460"/>
      <p2 x="-540" y="460"/>
    </wire>
    <wire>
      <p1 x="340" y="460"/>
      <p2 x="360" y="460"/>
    </wire>
    <wire>
      <p1 x="600" y="460"/>
      <p2 x="620" y="460"/>
    </wire>
    <wire>
      <p1 x="1600" y="460"/>
      <p2 x="1640" y="460"/>
    </wire>
    <wire>
      <p1 x="1140" y="460"/>
      <p2 x="1200" y="460"/>
    </wire>
    <wire>
      <p1 x="1700" y="720"/>
      <p2 x="1740" y="720"/>
    </wire>
    <wire>
      <p1 x="720" y="80"/>
      <p2 x="960" y="80"/>
    </wire>
    <wire>
      <p1 x="1520" y="80"/>
      <p2 x="1580" y="80"/>
    </wire>
    <wire>
      <p1 x="1760" y="980"/>
      <p2 x="2000" y="980"/>
    </wire>
    <wire>
      <p1 x="-40" y="980"/>
      <p2 x="40" y="980"/>
    </wire>
    <wire>
      <p1 x="2000" y="980"/>
      <p2 x="2100" y="980"/>
    </wire>
    <wire>
      <p1 x="2240" y="340"/>
      <p2 x="2260" y="340"/>
    </wire>
    <wire>
      <p1 x="-360" y="340"/>
      <p2 x="-340" y="340"/>
    </wire>
    <wire>
      <p1 x="1500" y="340"/>
      <p2 x="1520" y="340"/>
    </wire>
    <wire>
      <p1 x="960" y="340"/>
      <p2 x="1200" y="340"/>
    </wire>
    <wire>
      <p1 x="400" y="600"/>
      <p2 x="1100" y="600"/>
    </wire>
    <wire>
      <p1 x="-680" y="600"/>
      <p2 x="-660" y="600"/>
    </wire>
    <wire>
      <p1 x="-40" y="600"/>
      <p2 x="40" y="600"/>
    </wire>
    <wire>
      <p1 x="200" y="600"/>
      <p2 x="240" y="600"/>
    </wire>
    <wire>
      <p1 x="1820" y="600"/>
      <p2 x="1920" y="600"/>
    </wire>
    <wire>
      <p1 x="1680" y="600"/>
      <p2 x="1760" y="600"/>
    </wire>
    <wire>
      <p1 x="1760" y="600"/>
      <p2 x="1780" y="600"/>
    </wire>
    <wire>
      <p1 x="-80" y="-220"/>
      <p2 x="20" y="-220"/>
    </wire>
    <wire>
      <p1 x="260" y="-220"/>
      <p2 x="320" y="-220"/>
    </wire>
    <wire>
      <p1 x="2660" y="220"/>
      <p2 x="3180" y="220"/>
    </wire>
    <wire>
      <p1 x="3660" y="220"/>
      <p2 x="3740" y="220"/>
    </wire>
    <wire>
      <p1 x="3880" y="220"/>
      <p2 x="3900" y="220"/>
    </wire>
    <wire>
      <p1 x="1500" y="220"/>
      <p2 x="2260" y="220"/>
    </wire>
    <wire>
      <p1 x="880" y="220"/>
      <p2 x="960" y="220"/>
    </wire>
    <wire>
      <p1 x="1120" y="220"/>
      <p2 x="1200" y="220"/>
    </wire>
    <wire>
      <p1 x="960" y="220"/>
      <p2 x="1080" y="220"/>
    </wire>
    <wire>
      <p1 x="3900" y="220"/>
      <p2 x="4020" y="220"/>
    </wire>
    <wire>
      <p1 x="3180" y="220"/>
      <p2 x="3360" y="220"/>
    </wire>
    <wire>
      <p1 x="3160" y="480"/>
      <p2 x="3240" y="480"/>
    </wire>
    <wire>
      <p1 x="3040" y="480"/>
      <p2 x="3100" y="480"/>
    </wire>
    <wire>
      <p1 x="340" y="480"/>
      <p2 x="380" y="480"/>
    </wire>
    <wire>
      <p1 x="600" y="480"/>
      <p2 x="620" y="480"/>
    </wire>
    <wire>
      <p1 x="1680" y="480"/>
      <p2 x="1840" y="480"/>
    </wire>
    <wire>
      <p1 x="1160" y="480"/>
      <p2 x="1200" y="480"/>
    </wire>
    <wire>
      <p1 x="-80" y="-100"/>
      <p2 x="20" y="-100"/>
    </wire>
    <wire>
      <p1 x="380" y="740"/>
      <p2 x="420" y="740"/>
    </wire>
    <wire>
      <p1 x="-180" y="740"/>
      <p2 x="40" y="740"/>
    </wire>
    <wire>
      <p1 x="1560" y="740"/>
      <p2 x="1740" y="740"/>
    </wire>
    <wire>
      <p1 x="680" y="100"/>
      <p2 x="940" y="100"/>
    </wire>
    <wire>
      <p1 x="3680" y="100"/>
      <p2 x="3720" y="100"/>
    </wire>
    <wire>
      <p1 x="3820" y="100"/>
      <p2 x="3840" y="100"/>
    </wire>
    <wire>
      <p1 x="3880" y="100"/>
      <p2 x="3900" y="100"/>
    </wire>
    <wire>
      <p1 x="1760" y="1000"/>
      <p2 x="2040" y="1000"/>
    </wire>
    <wire>
      <p1 x="240" y="1000"/>
      <p2 x="320" y="1000"/>
    </wire>
    <wire>
      <p1 x="2040" y="1000"/>
      <p2 x="2100" y="1000"/>
    </wire>
    <wire>
      <p1 x="-360" y="360"/>
      <p2 x="-340" y="360"/>
    </wire>
    <wire>
      <p1 x="-560" y="360"/>
      <p2 x="-540" y="360"/>
    </wire>
    <wire>
      <p1 x="-700" y="360"/>
      <p2 x="-680" y="360"/>
    </wire>
    <wire>
      <p1 x="1500" y="360"/>
      <p2 x="1520" y="360"/>
    </wire>
    <wire>
      <p1 x="1040" y="360"/>
      <p2 x="1200" y="360"/>
    </wire>
    <wire>
      <p1 x="100" y="620"/>
      <p2 x="140" y="620"/>
    </wire>
    <wire>
      <p1 x="420" y="620"/>
      <p2 x="1120" y="620"/>
    </wire>
    <wire>
      <p1 x="1760" y="620"/>
      <p2 x="1780" y="620"/>
    </wire>
    <wire>
      <p1 x="-80" y="-240"/>
      <p2 x="20" y="-240"/>
    </wire>
    <wire>
      <p1 x="260" y="-240"/>
      <p2 x="320" y="-240"/>
    </wire>
    <wire>
      <p1 x="1760" y="880"/>
      <p2 x="1800" y="880"/>
    </wire>
    <wire>
      <p1 x="2500" y="880"/>
      <p2 x="2540" y="880"/>
    </wire>
    <wire>
      <p1 x="-40" y="880"/>
      <p2 x="260" y="880"/>
    </wire>
    <wire>
      <p1 x="2540" y="880"/>
      <p2 x="2680" y="880"/>
    </wire>
    <wire>
      <p1 x="1800" y="880"/>
      <p2 x="2100" y="880"/>
    </wire>
    <wire>
      <p1 x="3740" y="240"/>
      <p2 x="3820" y="240"/>
    </wire>
    <wire>
      <p1 x="3660" y="240"/>
      <p2 x="3680" y="240"/>
    </wire>
    <wire>
      <p1 x="3240" y="240"/>
      <p2 x="3360" y="240"/>
    </wire>
    <wire>
      <p1 x="1500" y="240"/>
      <p2 x="1520" y="240"/>
    </wire>
    <wire>
      <p1 x="880" y="240"/>
      <p2 x="980" y="240"/>
    </wire>
    <wire>
      <p1 x="1100" y="240"/>
      <p2 x="1200" y="240"/>
    </wire>
    <wire>
      <p1 x="2660" y="240"/>
      <p2 x="2680" y="240"/>
    </wire>
    <wire>
      <p1 x="2720" y="240"/>
      <p2 x="3000" y="240"/>
    </wire>
    <wire>
      <p1 x="1520" y="240"/>
      <p2 x="2260" y="240"/>
    </wire>
    <wire>
      <p1 x="2680" y="240"/>
      <p2 x="2720" y="240"/>
    </wire>
    <wire>
      <p1 x="3820" y="240"/>
      <p2 x="3840" y="240"/>
    </wire>
    <wire>
      <p1 x="980" y="240"/>
      <p2 x="1060" y="240"/>
    </wire>
    <wire>
      <p1 x="3080" y="500"/>
      <p2 x="3100" y="500"/>
    </wire>
    <wire>
      <p1 x="340" y="500"/>
      <p2 x="480" y="500"/>
    </wire>
    <wire>
      <p1 x="600" y="500"/>
      <p2 x="620" y="500"/>
    </wire>
    <wire>
      <p1 x="1720" y="500"/>
      <p2 x="1840" y="500"/>
    </wire>
    <wire>
      <p1 x="-80" y="-120"/>
      <p2 x="20" y="-120"/>
    </wire>
    <wire>
      <p1 x="1540" y="120"/>
      <p2 x="1580" y="120"/>
    </wire>
    <wire>
      <p1 x="640" y="120"/>
      <p2 x="920" y="120"/>
    </wire>
    <wire>
      <p1 x="240" y="760"/>
      <p2 x="260" y="760"/>
    </wire>
    <wire>
      <p1 x="-360" y="760"/>
      <p2 x="-300" y="760"/>
    </wire>
    <wire>
      <p1 x="1900" y="760"/>
      <p2 x="1940" y="760"/>
    </wire>
    <wire>
      <p1 x="1760" y="1020"/>
      <p2 x="2080" y="1020"/>
    </wire>
    <wire>
      <p1 x="-40" y="1020"/>
      <p2 x="40" y="1020"/>
    </wire>
    <wire>
      <p1 x="2080" y="1020"/>
      <p2 x="2100" y="1020"/>
    </wire>
    <wire>
      <p1 x="920" y="380"/>
      <p2 x="980" y="380"/>
    </wire>
    <wire>
      <p1 x="600" y="380"/>
      <p2 x="620" y="380"/>
    </wire>
    <wire>
      <p1 x="-360" y="380"/>
      <p2 x="-340" y="380"/>
    </wire>
    <wire>
      <p1 x="-560" y="380"/>
      <p2 x="-540" y="380"/>
    </wire>
    <wire>
      <p1 x="-720" y="380"/>
      <p2 x="-680" y="380"/>
    </wire>
    <wire>
      <p1 x="1500" y="380"/>
      <p2 x="1520" y="380"/>
    </wire>
    <wire>
      <p1 x="1640" y="380"/>
      <p2 x="1760" y="380"/>
    </wire>
    <wire>
      <p1 x="1060" y="380"/>
      <p2 x="1200" y="380"/>
    </wire>
    <wire>
      <p1 x="3840" y="80"/>
      <p2 x="3840" y="100"/>
    </wire>
    <wire>
      <p1 x="640" y="-20"/>
      <p2 x="640" y="120"/>
    </wire>
    <wire>
      <p1 x="1920" y="440"/>
      <p2 x="1920" y="600"/>
    </wire>
    <wire>
      <p1 x="1920" y="940"/>
      <p2 x="1920" y="1240"/>
    </wire>
    <wire>
      <p1 x="1540" y="120"/>
      <p2 x="1540" y="260"/>
    </wire>
    <wire>
      <p1 x="260" y="760"/>
      <p2 x="260" y="880"/>
    </wire>
    <wire>
      <p1 x="900" y="140"/>
      <p2 x="900" y="160"/>
    </wire>
    <wire>
      <p1 x="-520" y="200"/>
      <p2 x="-520" y="240"/>
    </wire>
    <wire>
      <p1 x="-520" y="300"/>
      <p2 x="-520" y="440"/>
    </wire>
    <wire>
      <p1 x="-520" y="560"/>
      <p2 x="-520" y="640"/>
    </wire>
    <wire>
      <p1 x="-520" y="440"/>
      <p2 x="-520" y="560"/>
    </wire>
    <wire>
      <p1 x="3720" y="80"/>
      <p2 x="3720" y="100"/>
    </wire>
    <wire>
      <p1 x="1800" y="640"/>
      <p2 x="1800" y="660"/>
    </wire>
    <wire>
      <p1 x="1800" y="880"/>
      <p2 x="1800" y="1360"/>
    </wire>
    <wire>
      <p1 x="1160" y="480"/>
      <p2 x="1160" y="640"/>
    </wire>
    <wire>
      <p1 x="1160" y="120"/>
      <p2 x="1160" y="180"/>
    </wire>
    <wire>
      <p1 x="2700" y="440"/>
      <p2 x="2700" y="480"/>
    </wire>
    <wire>
      <p1 x="2700" y="120"/>
      <p2 x="2700" y="200"/>
    </wire>
    <wire>
      <p1 x="400" y="420"/>
      <p2 x="400" y="600"/>
    </wire>
    <wire>
      <p1 x="400" y="600"/>
      <p2 x="400" y="800"/>
    </wire>
    <wire>
      <p1 x="1040" y="360"/>
      <p2 x="1040" y="680"/>
    </wire>
    <wire>
      <p1 x="1040" y="260"/>
      <p2 x="1040" y="300"/>
    </wire>
    <wire>
      <p1 x="1040" y="680"/>
      <p2 x="1040" y="840"/>
    </wire>
    <wire>
      <p1 x="2960" y="440"/>
      <p2 x="2960" y="480"/>
    </wire>
    <wire>
      <p1 x="-20" y="900"/>
      <p2 x="-20" y="960"/>
    </wire>
    <wire>
      <p1 x="2580" y="900"/>
      <p2 x="2580" y="1100"/>
    </wire>
    <wire>
      <p1 x="3860" y="160"/>
      <p2 x="3860" y="200"/>
    </wire>
    <wire>
      <p1 x="1940" y="460"/>
      <p2 x="1940" y="760"/>
    </wire>
    <wire>
      <p1 x="-280" y="600"/>
      <p2 x="-280" y="640"/>
    </wire>
    <wire>
      <p1 x="-280" y="840"/>
      <p2 x="-280" y="880"/>
    </wire>
    <wire>
      <p1 x="920" y="680"/>
      <p2 x="920" y="740"/>
    </wire>
    <wire>
      <p1 x="920" y="120"/>
      <p2 x="920" y="180"/>
    </wire>
    <wire>
      <p1 x="1560" y="400"/>
      <p2 x="1560" y="740"/>
    </wire>
    <wire>
      <p1 x="-540" y="160"/>
      <p2 x="-540" y="360"/>
    </wire>
    <wire>
      <p1 x="-540" y="380"/>
      <p2 x="-540" y="460"/>
    </wire>
    <wire>
      <p1 x="3740" y="220"/>
      <p2 x="3740" y="240"/>
    </wire>
    <wire>
      <p1 x="1180" y="120"/>
      <p2 x="1180" y="160"/>
    </wire>
    <wire>
      <p1 x="-160" y="300"/>
      <p2 x="-160" y="580"/>
    </wire>
    <wire>
      <p1 x="2080" y="1020"/>
      <p2 x="2080" y="1080"/>
    </wire>
    <wire>
      <p1 x="800" y="-20"/>
      <p2 x="800" y="40"/>
    </wire>
    <wire>
      <p1 x="2720" y="240"/>
      <p2 x="2720" y="680"/>
    </wire>
    <wire>
      <p1 x="-420" y="180"/>
      <p2 x="-420" y="200"/>
    </wire>
    <wire>
      <p1 x="-420" y="200"/>
      <p2 x="-420" y="320"/>
    </wire>
    <wire>
      <p1 x="1700" y="160"/>
      <p2 x="1700" y="720"/>
    </wire>
    <wire>
      <p1 x="1060" y="380"/>
      <p2 x="1060" y="560"/>
    </wire>
    <wire>
      <p1 x="1060" y="240"/>
      <p2 x="1060" y="280"/>
    </wire>
    <wire>
      <p1 x="2980" y="260"/>
      <p2 x="2980" y="460"/>
    </wire>
    <wire>
      <p1 x="420" y="440"/>
      <p2 x="420" y="620"/>
    </wire>
    <wire>
      <p1 x="420" y="620"/>
      <p2 x="420" y="660"/>
    </wire>
    <wire>
      <p1 x="-40" y="600"/>
      <p2 x="-40" y="840"/>
    </wire>
    <wire>
      <p1 x="-40" y="880"/>
      <p2 x="-40" y="980"/>
    </wire>
    <wire>
      <p1 x="-680" y="460"/>
      <p2 x="-680" y="520"/>
    </wire>
    <wire>
      <p1 x="1960" y="960"/>
      <p2 x="1960" y="1200"/>
    </wire>
    <wire>
      <p1 x="3880" y="80"/>
      <p2 x="3880" y="100"/>
    </wire>
    <wire>
      <p1 x="3240" y="240"/>
      <p2 x="3240" y="480"/>
    </wire>
    <wire>
      <p1 x="680" y="-20"/>
      <p2 x="680" y="100"/>
    </wire>
    <wire>
      <p1 x="940" y="100"/>
      <p2 x="940" y="200"/>
    </wire>
    <wire>
      <p1 x="1840" y="900"/>
      <p2 x="1840" y="1320"/>
    </wire>
    <wire>
      <p1 x="3760" y="80"/>
      <p2 x="3760" y="160"/>
    </wire>
    <wire>
      <p1 x="-180" y="320"/>
      <p2 x="-180" y="400"/>
    </wire>
    <wire>
      <p1 x="-180" y="680"/>
      <p2 x="-180" y="740"/>
    </wire>
    <wire>
      <p1 x="-180" y="780"/>
      <p2 x="-180" y="800"/>
    </wire>
    <wire>
      <p1 x="3000" y="240"/>
      <p2 x="3000" y="260"/>
    </wire>
    <wire>
      <p1 x="1720" y="500"/>
      <p2 x="1720" y="580"/>
    </wire>
    <wire>
      <p1 x="1720" y="580"/>
      <p2 x="1720" y="680"/>
    </wire>
    <wire>
      <p1 x="1080" y="400"/>
      <p2 x="1080" y="580"/>
    </wire>
    <wire>
      <p1 x="1080" y="220"/>
      <p2 x="1080" y="260"/>
    </wire>
    <wire>
      <p1 x="-700" y="260"/>
      <p2 x="-700" y="320"/>
    </wire>
    <wire>
      <p1 x="-700" y="320"/>
      <p2 x="-700" y="360"/>
    </wire>
    <wire>
      <p1 x="2620" y="920"/>
      <p2 x="2620" y="1140"/>
    </wire>
    <wire>
      <p1 x="3900" y="100"/>
      <p2 x="3900" y="220"/>
    </wire>
    <wire>
      <p1 x="1600" y="320"/>
      <p2 x="1600" y="460"/>
    </wire>
    <wire>
      <p1 x="960" y="340"/>
      <p2 x="960" y="400"/>
    </wire>
    <wire>
      <p1 x="960" y="80"/>
      <p2 x="960" y="220"/>
    </wire>
    <wire>
      <p1 x="960" y="400"/>
      <p2 x="960" y="440"/>
    </wire>
    <wire>
      <p1 x="1860" y="560"/>
      <p2 x="1860" y="580"/>
    </wire>
    <wire>
      <p1 x="3140" y="100"/>
      <p2 x="3140" y="280"/>
    </wire>
    <wire>
      <p1 x="840" y="-20"/>
      <p2 x="840" y="20"/>
    </wire>
    <wire>
      <p1 x="1100" y="200"/>
      <p2 x="1100" y="240"/>
    </wire>
    <wire>
      <p1 x="1100" y="420"/>
      <p2 x="1100" y="600"/>
    </wire>
    <wire>
      <p1 x="460" y="660"/>
      <p2 x="460" y="900"/>
    </wire>
    <wire>
      <p1 x="1740" y="800"/>
      <p2 x="1740" y="840"/>
    </wire>
    <wire>
      <p1 x="-720" y="200"/>
      <p2 x="-720" y="380"/>
    </wire>
    <wire>
      <p1 x="2000" y="980"/>
      <p2 x="2000" y="1160"/>
    </wire>
    <wire>
      <p1 x="720" y="-20"/>
      <p2 x="720" y="80"/>
    </wire>
    <wire>
      <p1 x="980" y="320"/>
      <p2 x="980" y="380"/>
    </wire>
    <wire>
      <p1 x="980" y="60"/>
      <p2 x="980" y="240"/>
    </wire>
    <wire>
      <p1 x="980" y="380"/>
      <p2 x="980" y="440"/>
    </wire>
    <wire>
      <p1 x="1880" y="920"/>
      <p2 x="1880" y="1280"/>
    </wire>
    <wire>
      <p1 x="600" y="-20"/>
      <p2 x="600" y="140"/>
    </wire>
    <wire>
      <p1 x="3800" y="80"/>
      <p2 x="3800" y="200"/>
    </wire>
    <wire>
      <p1 x="-480" y="440"/>
      <p2 x="-480" y="460"/>
    </wire>
    <wire>
      <p1 x="1120" y="180"/>
      <p2 x="1120" y="220"/>
    </wire>
    <wire>
      <p1 x="1120" y="440"/>
      <p2 x="1120" y="620"/>
    </wire>
    <wire>
      <p1 x="480" y="500"/>
      <p2 x="480" y="640"/>
    </wire>
    <wire>
      <p1 x="3680" y="240"/>
      <p2 x="3680" y="300"/>
    </wire>
    <wire>
      <p1 x="3680" y="60"/>
      <p2 x="3680" y="100"/>
    </wire>
    <wire>
      <p1 x="3680" y="100"/>
      <p2 x="3680" y="180"/>
    </wire>
    <wire>
      <p1 x="3680" y="300"/>
      <p2 x="3680" y="340"/>
    </wire>
    <wire>
      <p1 x="3040" y="180"/>
      <p2 x="3040" y="480"/>
    </wire>
    <wire>
      <p1 x="1760" y="520"/>
      <p2 x="1760" y="600"/>
    </wire>
    <wire>
      <p1 x="-100" y="400"/>
      <p2 x="-100" y="680"/>
    </wire>
    <wire>
      <p1 x="2660" y="940"/>
      <p2 x="2660" y="1180"/>
    </wire>
    <wire>
      <p1 x="1000" y="40"/>
      <p2 x="1000" y="260"/>
    </wire>
    <wire>
      <p1 x="360" y="160"/>
      <p2 x="360" y="400"/>
    </wire>
    <wire>
      <p1 x="360" y="460"/>
      <p2 x="360" y="560"/>
    </wire>
    <wire>
      <p1 x="360" y="560"/>
      <p2 x="360" y="700"/>
    </wire>
    <wire>
      <p1 x="360" y="700"/>
      <p2 x="360" y="720"/>
    </wire>
    <wire>
      <p1 x="1640" y="300"/>
      <p2 x="1640" y="380"/>
    </wire>
    <wire>
      <p1 x="1640" y="380"/>
      <p2 x="1640" y="420"/>
    </wire>
    <wire>
      <p1 x="2540" y="880"/>
      <p2 x="2540" y="1060"/>
    </wire>
    <wire>
      <p1 x="3820" y="100"/>
      <p2 x="3820" y="240"/>
    </wire>
    <wire>
      <p1 x="1900" y="420"/>
      <p2 x="1900" y="520"/>
    </wire>
    <wire>
      <p1 x="3180" y="100"/>
      <p2 x="3180" y="220"/>
    </wire>
    <wire>
      <p1 x="880" y="-20"/>
      <p2 x="880" y="0"/>
    </wire>
    <wire>
      <p1 x="1520" y="80"/>
      <p2 x="1520" y="240"/>
    </wire>
    <wire>
      <p1 x="1520" y="420"/>
      <p2 x="1520" y="780"/>
    </wire>
    <wire>
      <p1 x="1140" y="160"/>
      <p2 x="1140" y="200"/>
    </wire>
    <wire>
      <p1 x="1140" y="460"/>
      <p2 x="1140" y="640"/>
    </wire>
    <wire>
      <p1 x="1780" y="440"/>
      <p2 x="1780" y="560"/>
    </wire>
    <wire>
      <p1 x="500" y="140"/>
      <p2 x="500" y="160"/>
    </wire>
    <wire>
      <p1 x="3060" y="160"/>
      <p2 x="3060" y="520"/>
    </wire>
    <wire>
      <p1 x="-760" y="400"/>
      <p2 x="-760" y="640"/>
    </wire>
    <wire>
      <p1 x="2040" y="1000"/>
      <p2 x="2040" y="1120"/>
    </wire>
    <wire>
      <p1 x="2040" y="280"/>
      <p2 x="2040" y="420"/>
    </wire>
    <wire>
      <p1 x="760" y="-20"/>
      <p2 x="760" y="60"/>
    </wire>
    <wire>
      <p1 x="2680" y="240"/>
      <p2 x="2680" y="440"/>
    </wire>
    <wire>
      <p1 x="1660" y="180"/>
      <p2 x="1660" y="420"/>
    </wire>
    <wire>
      <p1 x="380" y="480"/>
      <p2 x="380" y="580"/>
    </wire>
    <wire>
      <p1 x="380" y="580"/>
      <p2 x="380" y="740"/>
    </wire>
    <wire>
      <p1 x="380" y="740"/>
      <p2 x="380" y="760"/>
    </wire>
    <wire>
      <p1 x="1020" y="20"/>
      <p2 x="1020" y="280"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>
